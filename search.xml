<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello-world</title>
      <link href="/hello-world"/>
      <url>/hello-world</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux</title>
      <link href="/Tmux"/>
      <url>/Tmux</url>
      
        <content type="html"><![CDATA[<h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><h2 id="Tmux概念"><a href="#Tmux概念" class="headerlink" title="Tmux概念"></a>Tmux概念</h2><p>Tmux（终端多路复用器）是一个在终端会话中提供多窗口和面板管理的工具。它允许你在一个终端窗口中同时运行多个终端会话，以便更有效地管理和组织你的工作环境</p><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离：</strong></p><ol><li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</li><li>它可以让新窗口”接入”已经存在的会话。</li><li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li><li>它还支持窗口任意的垂直和水平拆分。</li></ol><p><strong>Tmux的层次逻辑——树：</strong></p><ul><li>tmux服务可以开启多个session(会话)</li><li>一个session(会话)可以开多个window(窗口)</li><li>一个window(窗口)可以分多个pane(窗格)</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>Ubuntu 或 Debian</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install tmux</span><br></pre></td></tr></table></figure></li><li><p>CentOS 或 Fedora</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install tmux</span><br></pre></td></tr></table></figure></li><li><p>Mac</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote><p><strong>前缀键</strong></p><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>ctrl+b</code>，即先按下<code>ctrl+b</code>，快捷键才会生效。</p><p>举例来说，帮助命令的快捷键是<code>ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>ctrl+b</code>，松开后再按下<code>?</code>，就会显示帮助信息。按下<code>ESC</code> 键或<code>q</code>键，就可以退出帮助。</p></blockquote><h3 id="tmux操作"><a href="#tmux操作" class="headerlink" title="tmux操作"></a>tmux操作</h3><h4 id="1-启动tmux"><a href="#1-启动tmux" class="headerlink" title="1. 启动tmux"></a>1. 启动tmux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Barbecue-g/imagehost/Linux/终端复用工具/Tmux.png" alt="Tmux"  /><p> <code>[0] 0:zsh*</code> ：中括号中0表示当前session-name，紧跟着的0代表window的序号，第一个window显示为0，环境为zsh，<code>*</code>意味着当前处于活跃状态的窗口。</p><p> <code>&quot;MacBookAir.local&quot;</code> ：主机名</p><p><code>15:22 27- 2-24</code>：当前时间</p><h4 id="2-退出tmux"><a href="#2-退出tmux" class="headerlink" title="2. 退出tmux"></a>2. 退出tmux</h4><p><code>tmux</code> 窗口中按下 <code>ctrl+d</code>，或者按下 <code>ctrl+b</code> ，然后再按下 <code>&amp;</code>，或者显式输入<code>exit</code>命令，退出 Tmux 窗口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="3-翻屏模式"><a href="#3-翻屏模式" class="headerlink" title="3. 翻屏模式"></a>3. 翻屏模式</h4><p>在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>[</code>进入翻屏模式，然后按<code>q</code>退出翻屏模式。</p><p>或者在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后摁下<code>PgUp</code>也可进入翻屏模式。（mac为<code>fn</code>+<code>方向键</code>）</p><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><h4 id="1-新建会话"><a href="#1-新建会话" class="headerlink" title="1. 新建会话"></a>1. 新建会话</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>此时可以看到原本 [0] 里面的 0 变成了设置的 session-name(表示会话名称，可以为字母或数字)</p><h4 id="2-会话分离"><a href="#2-会话分离" class="headerlink" title="2. 会话分离"></a>2. 会话分离</h4><p>在 Tmux 窗口中，按下在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure><p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p><h4 id="3-接入会话"><a href="#3-接入会话" class="headerlink" title="3. 接入会话"></a>3. 接入会话</h4><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号(简写)</span></span><br><span class="line">tmux  a  -t &lt;session-number&gt;</span><br><span class="line"><span class="comment"># 使用会话名称（&lt;session-name&gt;可以简写）</span></span><br><span class="line">tmux  attach  -t  &lt;session-name&gt;</span><br><span class="line"><span class="comment"># 使用全写</span></span><br><span class="line">tmux attach-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><h4 id="4-杀死会话"><a href="#4-杀死会话" class="headerlink" title="4. 杀死会话"></a>4. 杀死会话</h4><p><code>tmux kill-session</code>命令用于杀死某个会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">tmux kill-session -t &lt;session-number&gt;</span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">tmux kill-session -t &lt;session-name&gt;</span><br><span class="line"><span class="comment"># 关闭所有的会话</span></span><br><span class="line">tmux kill-serve  </span><br><span class="line"><span class="comment"># 关闭除指定会话外的所有会话</span></span><br><span class="line">tmux kill-session -a -t session-name</span><br></pre></td></tr></table></figure><h4 id="5-切换会话"><a href="#5-切换会话" class="headerlink" title="5. 切换会话"></a>5. 切换会话</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">tmux switch -t 0</span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><h4 id="6-重命名会话"><a href="#6-重命名会话" class="headerlink" title="6. 重命名会话"></a>6. 重命名会话</h4><p>按下在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>$</code>，或者<code>tmux rename-session</code>命令用于重命名会话。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure><h4 id="7-列出所有会话"><a href="#7-列出所有会话" class="headerlink" title="7. 列出所有会话"></a>7. 列出所有会话</h4><p>按下在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>s</code>，，然后用方向键进行操作，或者<code>tmux ls</code>命令用于列出所有会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><h4 id="1-新建窗口"><a href="#1-新建窗口" class="headerlink" title="1. 新建窗口"></a>1. 新建窗口</h4><p>按下在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>c</code>，或者<code>tmux new-window</code>命令用来创建新窗口。创建一个新窗口，状态栏会显示多个窗口的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window</span><br><span class="line"><span class="comment"># 新建一个指定名称的窗口</span></span><br><span class="line">tmux new-window -n &lt;window-name&gt;</span><br></pre></td></tr></table></figure><h4 id="2-切换窗口"><a href="#2-切换窗口" class="headerlink" title="2. 切换窗口"></a>2. 切换窗口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到指定编号的窗口</span></span><br><span class="line">tmux select-window -t &lt;window-number&gt;</span><br><span class="line"><span class="comment"># 切换到指定名称的窗口</span></span><br><span class="line">tmux select-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure><p><em><strong>切换到上一个窗口</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>p</code></p><p><em><strong>切换到下一个窗口</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>n</code></p><p><strong>从列表中选择窗口</strong>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>w</code> </p><p><em><strong>切换到指定编号窗口</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>&lt;number&gt;</code> </p><h4 id="3-重命名窗口"><a href="#3-重命名窗口" class="headerlink" title="3. 重命名窗口"></a>3. 重命名窗口</h4><p>在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>,</code>，或者<code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-window &lt;new-name&gt;</span><br></pre></td></tr></table></figure><h4 id="4-在一个会话中的多个窗口中作出选择"><a href="#4-在一个会话中的多个窗口中作出选择" class="headerlink" title="4. 在一个会话中的多个窗口中作出选择"></a>4. 在一个会话中的多个窗口中作出选择</h4><p>在<code>tmux</code>窗口中按下<code>ctrl+b</code>，然后再按下<code>w</code>。</p><h3 id="窗格操作"><a href="#窗格操作" class="headerlink" title="窗格操作"></a>窗格操作</h3><h4 id="1-划分窗格"><a href="#1-划分窗格" class="headerlink" title="1. 划分窗格"></a>1. 划分窗格</h4><p><em><strong>划分上下两个窗格</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>&quot;</code>，或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window</span><br></pre></td></tr></table></figure><p><em><strong>划分左右两个窗格</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>%</code> ，或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window -h</span><br></pre></td></tr></table></figure><h4 id="2-移动光标"><a href="#2-移动光标" class="headerlink" title="2. 移动光标"></a>2. 移动光标</h4><p>方向键移动光标：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>方向键</code>或按下 <code>q</code>，此时再摁下窗格的数字即可切换对应窗格。</p><p>移动光标到下一个窗格：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>o</code></p><p>移动光标到上一次窗格：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>;</code></p><p>使用<code>tmux select-pane</code>命令用来移动光标到对应的窗格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 光标切换到上方窗格</span></span><br><span class="line">tmux select-pane -U</span><br><span class="line"><span class="comment"># 光标切换到下方窗格</span></span><br><span class="line">tmux select-pane -D</span><br><span class="line"><span class="comment"># 光标切换到左边窗格</span></span><br><span class="line">tmux select-pane -L</span><br><span class="line"><span class="comment"># 光标切换到右边窗格</span></span><br><span class="line">tmux select-pane -R</span><br></pre></td></tr></table></figure><h4 id="3-交换窗格位置"><a href="#3-交换窗格位置" class="headerlink" title="3. 交换窗格位置"></a>3. 交换窗格位置</h4><p>当前窗格与上一个窗格交换位置：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>&#123;</code>，</p><p>当前窗格与下一个窗格交换位置：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>&#125;</code>，</p><p>使用<code>tmux swap-pane</code>命令用来交换窗格位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前窗格上移</span></span><br><span class="line">tmux swap-pane -U</span><br><span class="line"><span class="comment"># 当前窗格下移</span></span><br><span class="line">tmux swap-pane -D</span><br></pre></td></tr></table></figure><p>所有窗格向前移动一个位置，第一个窗格变成最后一个窗格：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>ctrl+o</code>。</p><p>所有窗格向后移动一个位置，最后一个窗格变成第一个窗格：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>alt+o</code>。</p><h4 id="4-关闭窗格"><a href="#4-关闭窗格" class="headerlink" title="4. 关闭窗格"></a>4. 关闭窗格</h4><p><em><strong>关闭当前窗格</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>x</code></p><h4 id="5-其他快捷键"><a href="#5-其他快捷键" class="headerlink" title="5. 其他快捷键"></a>5. 其他快捷键</h4><p><em><strong>将当前窗格拆分为一个独立窗口</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>!</code></p><p><em><strong>当前窗格全屏显示</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>z</code>（再使用一次会变回原来大小）</p><p><em><strong>调整当前窗格大小</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> 不放，，然后再按 <code>方向键</code>调整当前窗格的大小</p><p><em><strong>显示窗格编号</strong></em>：在 <code>tmux</code> 窗口中按下 <code>ctrl+b</code> ，然后再按下 <code>q</code>，此时再摁下窗格的数字即可切换对应窗格。</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="1-列出所有快捷键，及其对应的-Tmux-命令"><a href="#1-列出所有快捷键，及其对应的-Tmux-命令" class="headerlink" title="1. 列出所有快捷键，及其对应的 Tmux 命令"></a>1. 列出所有快捷键，及其对应的 Tmux 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-keys</span><br></pre></td></tr></table></figure><h4 id="2-列出所有-Tmux-命令及其参数"><a href="#2-列出所有-Tmux-命令及其参数" class="headerlink" title="2. 列出所有 Tmux 命令及其参数"></a>2. 列出所有 Tmux 命令及其参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-commands</span><br></pre></td></tr></table></figure><h4 id="3-列出当前所有-Tmux-会话的信息"><a href="#3-列出当前所有-Tmux-会话的信息" class="headerlink" title="3. 列出当前所有 Tmux 会话的信息"></a>3. 列出当前所有 Tmux 会话的信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux info</span><br></pre></td></tr></table></figure><h4 id="4-重新加载当前的-Tmux-配置"><a href="#4-重新加载当前的-Tmux-配置" class="headerlink" title="4. 重新加载当前的 Tmux 配置"></a>4. 重新加载当前的 Tmux 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/Nginx"/>
      <url>/Nginx</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一、Nginx的特点和功能"><a href="#一、Nginx的特点和功能" class="headerlink" title="一、Nginx的特点和功能"></a>一、Nginx的特点和功能</h2><h3 id="1-Nginx的特点"><a href="#1-Nginx的特点" class="headerlink" title="1.Nginx的特点"></a>1.Nginx的特点</h3><ol><li>高并发、高性能——基于事件驱动的模型</li><li>可扩展性好，支持模块化开发（插件开发）</li><li>可靠性高——4个9（99.99%）（阿里云 12个9）</li><li>热部署：动态加载配置文件（<strong>新替代旧的worker进程</strong>）</li></ol><h3 id="2-Nginx的功能"><a href="#2-Nginx的功能" class="headerlink" title="2. Nginx的功能"></a>2. Nginx的功能</h3><ol><li>访问静态资源：存储在服务器本地的文件（<code>*.html</code>、<code>*.jpeg/*.png</code>、<code>*.mp4/*.flv</code>)</li><li>API服务：通过路径的方式，提供计算服务（<code>/s？wd=123</code>、<code>/barbecue/s?</code>)</li><li>反向代理：在客户端和服务器之间充当中间层，将客户端的请求转发给后端的多个服务器，并将服务器的响应返回给客户端。</li><li>负载均衡：当一个网络或服务器系统面临大量的请求和流量时，负载均衡能够将这些请求分发到不同的服务器上，以避免单一服务器过载而导致性能下降或系统崩溃。</li></ol><h3 id="3-Apache与Nginx的对比"><a href="#3-Apache与Nginx的对比" class="headerlink" title="3. Apache与Nginx的对比"></a>3. Apache与Nginx的对比</h3><ul><li><p>Apache</p><p>Apache是基于进程的设计：每来一个连接，就会fork子进程进行处理</p><p>问题：无法处理大并发的情况 </p></li><li><p>Nginx</p><p>Nginx是基于事件驱动的设计：Linux: epoll IO多路复用机制</p><p>单线程就可以处理大量连接的操作：客户端在与服务器进行交互的过程中，将业务拆分成不同的阶段来进行处理</p><p>1G内存可以处理10W的连接</p></li></ul><h2 id="二、Nginx安装"><a href="#二、Nginx安装" class="headerlink" title="二、Nginx安装"></a>二、Nginx安装</h2><p>Nginx的安装有很多种方法，我们这里选择的是从源码安装Nginx。</p><ol><li>首先，需要先安装依赖的3个动态库。可以选择从源代码安装，也可以从包管理器中下载安装：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libz-dev #安装zlib库 处理压缩的事宜 </span><br><span class="line">sudo apt install libpcre3-dev #安装pcre库 处理正则表达式 </span><br><span class="line">sudo apt install libssl-dev #安装openssl库 处理SSL连接</span><br></pre></td></tr></table></figure><ol start="2"><li>从官方网站上获取源代码的压缩包：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://nginx.org/download/nginx-1.23.3.tar.gz#下载</span><br><span class="line">tar xvfz nginx-1.23.3.tar.gz#解压</span><br></pre></td></tr></table></figure><ol start="3"><li>安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.23.3.tar.gz # cd到源代码目录</span><br><span class="line">./configure # 生成makefile文件 </span><br><span class="line">make</span><br><span class="line">sudo make install # 将生成的文件移动到系统的合适目录下</span><br></pre></td></tr></table></figure><ol start="4"><li>启动</li></ol><p>在<code>/usr/local/nginx</code>下的<code>sbin</code>的<code>nginx</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx - c conf/nginx.conf</span><br></pre></td></tr></table></figure><blockquote><p>采用这种最简单的方式安装Nginx之后会只安装了最基本的模块，如果需要安装其他模块，则需要重新配置和install。</p><p>默认情况下，Nginx的默认目录是 <code>/usr/local/nginx/</code> ，可执行程序是<code> /usr/local/nginx/sbin/nginx</code> ，配置文件是 <code>/usr/local/nginx/conf/nginx.conf</code> 。</p></blockquote><h2 id="三、Nginx相关命令"><a href="#三、Nginx相关命令" class="headerlink" title="三、Nginx相关命令"></a>三、Nginx相关命令</h2><p>下面是一些相关的命令，注意应当使用<code>特权用户</code>启动<code>nginx</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx # 默认方式启动 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数：</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-h 查看帮助</span> </span><br><span class="line">-c x.conf # 指定配置文件x.conf启动 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p /opt/nginx 指定工作目录是/opt/nginx</span> </span><br><span class="line">-s stop # 强制停止nginx </span><br><span class="line">-s quit # 优雅停止nginx（等待当前任务结束） </span><br><span class="line">-s reload # 重启nginx </span><br><span class="line">-s reopen # 重新打开日志文件 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果启动Nginx的时候使用了-c/-p，那么使用-s的时候也必须加上</span></span> </span><br><span class="line">-t # 检查默认配置文件 </span><br><span class="line">-T # 检查默认配置文件并输出 </span><br><span class="line">-t -c x.conf # 检查x.conf </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v/-V 显示版本信息</span></span><br></pre></td></tr></table></figure><ul><li>快速关闭： 在还有连接没有服务完毕的情况下，直接关闭掉的</li><li>优雅关闭：在还有连接没有服务完毕的情况下，先处理完毕之后， 再关闭服务器 </li><li>热部署：在不中断现有服务的情况下，动态地更新或替换Nginx服务器的配置或代码。</li></ul><p>若要增加一些额外的模块或者是修改默认的安装位置，可以使用下面定制安装的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">configure命令的选项</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./configure --<span class="built_in">help</span> 查看帮助</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--prefix=/opt/nginx 修改安装位置</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--with-pcre=/path/to/pcre-8.33 指定pcre8.33的源码路径为/path/to/pcre-8.33</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--with-xxx_module 增加xxx模块</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--without-xxx_module 去掉默认的xx模块</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--with-debug 在日志中打印调试信息</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--with-ld-opt=OPTIONS 在gcc编译时补充OPTIONS选项，通常用于链接库文件</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--add_module=PATH 增加第3方模块</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make modules <span class="comment"># 只编译变动的模块</span></span></span><br></pre></td></tr></table></figure><h2 id="四、Nginx配置文件"><a href="#四、Nginx配置文件" class="headerlink" title="四、Nginx配置文件"></a>四、Nginx配置文件</h2><h3 id="1-配置文件位置"><a href="#1-配置文件位置" class="headerlink" title="1. 配置文件位置"></a>1. 配置文件位置</h3><p>默认情况下：配置文件是 <code>/usr/local/nginx/conf/nginx.conf</code> 。但是可以在执行时候用<code>-c</code>指定配置文件x.conf启动 </p><h3 id="2-配置文件的语法特性"><a href="#2-配置文件的语法特性" class="headerlink" title="2. 配置文件的语法特性"></a>2. 配置文件的语法特性</h3><p>配置文件是<strong>上下文</strong>的集合。上下文是一个包含很多<strong>指令</strong>的块，不同的上下文负责指定不同部分的功能。常见上下文包括：main、http、server、upstream、location 和mail等等。上下文之间是不能重叠的，此外也不存在所谓的”全局”服务器配置文件。配置文件的语法尽量向C风格看齐，特别是使用花括号来描述作用域，从实现一个简明的描述上下文之间嵌套关系的表示方法。Nginx支持丰富的指令。其中大部分指令是比较简单且无副作用的，但是有少数指令的使用就需要对Nginx的深入理解了——比如经常使用的高级指令rewrite。</p><p>Nginx的配置文件有着这样的特性：</p><ul><li>使用#单行注释；</li><li>指令用分号结尾，多个参数用空格分隔，如果参数本身有空格，可以使用引号，指令形式<code>key value(s)</code>；</li><li>使用单引号和双引号界定字符串，使用反斜杠转义；</li><li>用大括号括住的范围称为一个指令块，指令块也可以称为上下文(context) ， 指令块内部可以设置多条指令，并且无需分号结尾（类似于C里面的语句块）；</li><li>有些指令只能出现在特定的上下文当中；</li><li>指令块内部可以是指令，也允许嵌套内部块，；</li><li><code>include</code>指令可以包含其他配置文件，支持通配符<code>*</code>；</li><li><code>$</code>符号开头的代表的是变量，变量是有<code>nginx</code>提供的</li></ul><h3 id="3-使用示例的配置文件"><a href="#3-使用示例的配置文件" class="headerlink" title="3. 使用示例的配置文件"></a>3. 使用示例的配置文件</h3><p>当Nginx配置完成以后，Nginx默认提供了一个默认的配置文件，路径是 <code>/usr/local/nginx/conf/nginx.conf</code> ，把所有的注释去掉，通过这个配置文件启动的Nginx的功能就非常的简单，就是提供一个 <code>index.html </code>的<code>HTML</code>文件返回给客户端。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123; </span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line">  <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>; </span><br><span class="line">  <span class="attribute">keepalive_timeout</span> <span class="number">65</span>; </span><br><span class="line">  <span class="section">server</span> </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> localhost; </span><br><span class="line">    <span class="section">location</span> / &#123; </span><br><span class="line">      <span class="attribute">root</span> html; </span><br><span class="line">                <span class="attribute">index</span> index.html index.htm; </span><br><span class="line">               &#125;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attribute">root</span> html; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>main</code>上下文： 全局位置的指令位于main上下文</li><li><code>http</code>上下文： 制定了HTTP服务器相关的属性</li><li><code>server</code>上下文：指定了一个虚拟服务器</li><li><code>location</code>上下文： 为不同的路径设置不同的服务</li></ul><p>下面我们来详细解析一下这个配置文件：</p><ul><li><p>在全局上下文当中，存在一个<code>worker_processs</code>指令、一个<code>events</code>指令块和一个<code>http</code>指令块；</p></li><li><p><code>worker_process</code>指令指定了工作进程个数为<code>1</code>；</p></li><li><p><code>events</code>指令块说明了每个工作进程同时能支持的最大连接数是<code>1024</code>；</p></li><li><p><code>http</code>指令块首先引入了同目录的另一个文件<code>mime.types</code>；</p></li><li><p>然后<code>http</code>指令块设置一些属性，比如默认的响应类型、是否调用<code>sendfile</code>函数传输文件以及复用<code>tcp</code>连接的超时时限；</p></li><li><p><code>http</code>块上下文当中存在一个<code>server</code>块，这个<code>server</code>块描述一个虚拟服务端</p><ul><li><code>server</code>监听了<code>80</code>端口；</li><li><code>server</code>名字是<code>localhost</code>；</li><li>当有<code>URL</code>的路径部分匹配 <code>/</code> 时，找到服务端的<code>html</code>目录，访问其中的<code>index.html</code>文件；</li><li>HTTP的响应是500、502、503或者是504时，将URL的路径部分改写成 <code>/50x.html</code> ；</li><li>当有URL的路径部分匹配 <code>/50x.html</code> 时，找到服务端的html目录，访问其中的<code>50x.html</code>文件；</li></ul></li></ul><p>启动这个进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>然后使用浏览器输入服务端的IP地址即可显示Nginx的欢迎页。</p><h3 id="4-main上下文的指令"><a href="#4-main上下文的指令" class="headerlink" title="4. main上下文的指令"></a>4. main上下文的指令</h3><ol><li><p><code>user</code>指令</p><p><code>worker_process</code>在工作时，以<code>nobody</code>用户运行的，需要将其改成<code>root</code>用户</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root;<span class="comment">#放在最前面</span></span><br></pre></td></tr></table></figure></li><li><p><code>work_processes</code>指令用来配置<code>worker</code>进程的数量，一般来说这个数值和CPU核心数以及业务的计算密集程度有关。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>events</code>块用来配置事件模块的属性。它可以配置<code>worker</code>进程的一些属性，比如最大连接数、是否启用<code>accept</code>互斥锁来避免惊群、是否启用异步IO等等。一般来说其属性不需要做任何的修改。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>events</code>指令块说明了每个工作进程同时能支持的最大连接数是<code>1024</code>；</p></li><li><p>日志系统</p></li></ol><ul><li><p>全局上下文指令是core模块的<code>pid</code></p><p>pid指令描述了pid文件的路径，pid文件里面存储一个进程的pid，这样用户在使用命令发送信号的就能找到目标进程。默认的pid文件是<code>logs/nginx.pid</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pid</span> logs/nginx.pid;<span class="comment">#不同配置文件设定不同的nginx.pid(eg：nginx1.pid、nginx2.pid)</span></span><br></pre></td></tr></table></figure><blockquote><p>提问🙋：1个配置文件是否可以启动多个nginx服务器呢？</p><p>答：因为同一个配置文件的端口号是相同的，只有不同的配置文件中设置不同的端口，才可以同时启动多个 nginx服务器</p></blockquote><p><font color=#0099ff>多个配置文件启动多个nginx服务器</font></p><blockquote><p>nginx使用命令行发送信号的原理： </p><p>当nginx服务器启动时，会默认在logs目录之下产生一个<strong>nginx.pid</strong>文件，该 文件中存储的就是master进程的pid。当使用命令行 -s 去发送信号时，会先读取nginx.pid文件，获取master进程 的pid，之后再发送信号。</p></blockquote><p>有了pid指令指向不同的文件之后，就可以通过<code>-s</code>选项来关闭各自不同的nginx服务器。</p></li><li><p>全局上下文指令式core模块的<code>error_log</code></p><p>error_log指定了错误日志文件的路径和log记录的级别。一般生产环境选择默认的error级别即可。error_log这个指令是可以出现不同的上下文当中，如果块的内部和外部使用了同一个error_log指令，则采用就近原则生效。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">error_log</span> logs/<span class="literal">error</span>.log <span class="literal">error</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-http上下文的指令"><a href="#5-http上下文的指令" class="headerlink" title="5. http上下文的指令"></a>5. http上下文的指令</h3><p><code>http</code>指令块是整个Nginx配置当中最重要的一个模块，它影响了从请求建立、接收请求、生成响应、过滤响应等HTTP服务端的各个步骤。</p><ol><li><p>指令<code>log_format</code>，需要值得注意的是，它是属于http模块的子模块<code>http_log</code>模块的。<code>log_format</code>首先为格式起了一个名字，然后的格式参数是一个字符串，用来表示记录到日志文件当中的内容，在这个格式参数当中可以引用变量。下面就是Nginx示例当中提供的例子。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以使用同属于<code>http_log</code>模块的<code>access_log</code>指令来指定日志文件的路径。(最好是让每一个配置文件使用不同的路径。)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">access_log</span> logs/access_log main;</span><br></pre></td></tr></table></figure><p><code>access_log</code>用于指定记录访问日志的位置和格式。访问日志记录了每个客户端请求服务器的详细信息，包括请求的时间、客户端IP地址、请求的HTTP方法、URI、HTTP状态码等。这些日志对于监控服务器的流量、分析用户行为、排查问题以及进行性能优化都非常有用。</p><p>这里是日志内容的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [17/May/2022:17:11:22 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.47&quot;</span><br></pre></td></tr></table></figure></li><li><p>Nginx示例当中提供的例子</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;<span class="comment">#包含另外一个文件中的信息</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;<span class="comment">#零拷贝</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;<span class="comment">#超时时间</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>mime.types</code>指定类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">types &#123;</span><br><span class="line">    text/html                                        html htm shtml;</span><br><span class="line">    text/css                                         css;</span><br><span class="line">    text/xml                                         xml;</span><br><span class="line">    image/gif                                        gif;</span><br><span class="line">    image/jpeg                                       jpeg jpg;</span><br><span class="line">    application/javascript                           js;</span><br><span class="line">    application/atom+xml                             atom;</span><br><span class="line">    application/rss+xml                              rss;</span><br><span class="line">    #等等</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-server上下文的指令"><a href="#6-server上下文的指令" class="headerlink" title="6. server上下文的指令"></a>6. server上下文的指令</h3><p><code>server</code>块出现在<code>http</code>上下文当中，它描述一个nginx将要提供的虚拟服务端——这里虚拟的含义是指，客户端在感觉上会把不同的<code>server</code>看成是不同的服务端，而实际上在服务端操作系统上只存在一份进程。</p><ol><li><p><code>server</code>块的<code>listen</code>指令。这个指令描述了该虚拟服务端将要监听的端口号，<code>listen</code>指令还支持监听<code>unix</code>域<code>socketpair</code>。不同的<code>server</code>块应该选择监听不同的端口号。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>; <span class="comment">#监听端口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>server</code>块的<code>server_name</code>指令。这个指令设置了虚拟服务端的名字，这样的话，在配置文件当中，用户就可以使用多个server监听同一个端口，当用户请求接入的时候，会根据请求的URL域名的不同选择不同的虚拟服务端。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>; <span class="comment">#监听端口</span></span><br><span class="line"><span class="attribute">server_name</span> test.org;<span class="comment">#设置了虚拟服务端的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改域名映射在本地<code>/etc/hosts</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 test.org </span><br><span class="line">127.0.0.1 test1.org</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"><span class="attribute">include</span> mime.types; </span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">  <span class="section">server</span> </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> test.org; </span><br><span class="line">    <span class="section">location</span> / </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> test1.org; </span><br><span class="line">    <span class="section">location</span> / </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;world&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后使用curl命令就可以进行调试了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl test.org </span><br><span class="line">curl test1.org</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-location上下文的指令"><a href="#7-location上下文的指令" class="headerlink" title="7. location上下文的指令"></a>7. location上下文的指令</h3><p><code>location</code>配置块出现在<code>server</code>上下文中，它可以根据URL的路径部分，匹配一个合适的location，并执行块内的指令。从这个角度来看，locaiton部分是Nginx请求处理的终点站。</p><p><code>location</code>的路径的5种不同写法,具体如下：</p><ol><li><p>location uri {} 不带符号的前缀匹配</p><p><font color=#0099ff>在域名之后可以不添加路径信息， 此时会自动匹配之后根路径的情况 </font></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/\n&quot;</span>;<span class="comment">#IP默认</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /a &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/a\n&quot;</span>;<span class="comment">#IP/a</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /ab &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/ab\n&quot;</span>;<span class="comment">#IP/abIP/abCd</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /abc &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/abc\n&quot;</span>;<span class="comment">#IP/abcIP/abcd</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>匹配路径有重复的情况下，是会自动 根据<strong>最长匹配原则</strong>进行匹配</p></li><li><p>location ~ uri {} 正则匹配，大小写敏感 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/\n&quot;</span>;<span class="comment">#IP默认</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /a &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/a\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /ab &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/ab\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /abc &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/abc\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /[a-z]+</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /[a-z]+\n&quot;</span>;<span class="comment">#IP/a#IP/ab#IP/abc#IP/abcd</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /ab</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /ab\n&quot;</span>;<span class="comment">#IP/ab#IP/abc#IP/abcd</span></span><br><span class="line">    &#125;<span class="comment">#但此时~ /[a-z]+在前面，则优先匹配~ /[a-z]+</span></span><br></pre></td></tr></table></figure><ul><li><p>明当有多组正则匹配时， 还依赖于其配置文件中的顺序，优先匹配靠前的正则匹配</p></li><li><p>正则匹配的优先级高于不带符号的前缀匹配</p></li></ul></li><li><p>location ~* uri {} 正则匹配，忽略大小写 </p><p>与上面大致相同，只是忽略大小写。</p><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式教程</a></p></li><li><p>location ^~ uri {} 带符号的前缀匹配 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/\n&quot;</span>;<span class="comment">#IP默认</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /a &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/a\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /abc &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/ab\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /[a-z]+</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /[a-z]+\n&quot;</span>;<span class="comment">#IP/a#IP/abc#IP/abcd</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /ab</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /ab\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /ab &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;^~ /ab\n&quot;</span>;<span class="comment">#IP/ab</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>当不带符号的前缀匹配与带符号的前缀匹配形式是相同时，无法同时存在，配置文件会报错</li><li>带符号的前缀匹配优先级高于正则匹配的</li><li><font color=#0099ff>注意</font>：对于前缀匹配而言， 不管是带符号 的，还是不带符号的，都是先采用最长匹配原则进行匹配，之后得到一个结果A，再根据A的结果与正则进行比较。上例中<code>IP/abc</code>时，<code>/abc</code>和<code>^~ /ab</code>采取最长匹配原则进行匹配，得到<code>/abc</code>,此时的优先级不带符号的前缀匹配<code>/abc</code>小于正则匹配的<code>~ /[a-z]+</code>。所以结果是<code>~ /[a-z]+</code>。</li></ul></li><li><p>location &#x3D; uri {} 完全匹配</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /a &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/a\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> /ab &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;/ab\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /[a-z]+</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /[a-z]+\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /ab</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot; ~ /ab\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /abc &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;^~ /abc\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="section">location</span> = /abc &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;= /abc \n&quot;</span>;<span class="comment">#IP/abc</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>完全匹配</strong>优先级最高</li></ul></li></ol><blockquote><p>优先级：完全匹配&gt;带符号的前缀匹配&gt;正则匹配&gt;不带符号的前缀匹配</p><p>注意：对于前缀匹配而言， 不管是带符号 的，还是不带符号的，都是先采用最长匹配原则进行匹配，之后得到一个结果A，再根据A的结果与正则进行比较。</p></blockquote><h2 id="五、Nginx部分功能实现"><a href="#五、Nginx部分功能实现" class="headerlink" title="五、Nginx部分功能实现"></a>五、Nginx部分功能实现</h2><h3 id="1-Nginx部署静态资源"><a href="#1-Nginx部署静态资源" class="headerlink" title="1. Nginx部署静态资源"></a>1. Nginx部署静态资源</h3><p>使用file配置块可以根据不同的uri为用户响应的不同的文件。有些文件，比如HTML、png、svg之类的文件，浏览器可以直接在窗口中渲染显示，其他类型的文件访问时会直接下载到客户端机器上。我们把向用户直接提供网页资源的服务端称为静态资源服务器。</p><p>静态资源： <code>.html</code>、<code>.css</code>、<code>.gif</code>、<code>.js</code>(需要指定其在服务器上的路径信息(目录) )</p><p>root：设置服务器上所在的根目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#root path; </span></span><br><span class="line"><span class="comment">#设置文档的路径起始，path是服务端主机上的本地文件路径 </span></span><br><span class="line"><span class="comment">#path可以写绝对地址，也可以写相对地址（当前工作目录由configure程序决定，一般是/usr/local/nginx） </span></span><br><span class="line"><span class="section">location</span> /image/&#123; </span><br><span class="line">  <span class="attribute">root</span> dir/; </span><br><span class="line">  <span class="comment">#如果uri是ip:port/image/abc.txt 实际对应的服务端主机的文件如下</span></span><br><span class="line"><span class="comment">#/usr/local/nginx/dir/image/abc.txt </span></span><br><span class="line">  <span class="comment"># 路径是root的路径加上端口后的拼接路径</span></span><br><span class="line">    <span class="comment">#如果出现了文件未找到的问题，可以查阅error.log </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-部署cppreference参考文档"><a href="#2-部署cppreference参考文档" class="headerlink" title="2. 部署cppreference参考文档"></a>2. 部署cppreference参考文档</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/<span class="literal">error</span>1.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  logs/access1.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /en &#123;</span><br><span class="line">            <span class="comment">#root   html;# 相对路径的用法</span></span><br><span class="line">            <span class="attribute">root</span> /home/lwh/documents/cppreference;</span><br><span class="line">            <span class="attribute">index</span> index.html;<span class="comment">#找到对应的静态资源</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /common &#123;</span><br><span class="line">            <span class="comment">#root   html;# 相对路径的用法</span></span><br><span class="line">            <span class="attribute">root</span> /home/lwh/documents/cppreference;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-隐藏路径信息"><a href="#3-隐藏路径信息" class="headerlink" title="3. 隐藏路径信息"></a>3. 隐藏路径信息</h3><p>alias</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alias path; </span></span><br><span class="line"><span class="comment">#实现和root类似的效果 </span></span><br><span class="line"><span class="comment">#alias会把location部分替换成path</span></span><br><span class="line"><span class="comment">#root限制了uri必须按照的主机路径格式进行访问，而alias则不必 </span></span><br><span class="line"><span class="section">location</span> /image/&#123; </span><br><span class="line">  <span class="attribute">alias</span> dir/; </span><br><span class="line">  <span class="comment">#如果uri是ip:port/image/abc.txt 实际对应的服务端主机的文件如下：</span></span><br><span class="line">  <span class="comment"># /usr/local/nginx/dir/abc.txt </span></span><br><span class="line">  <span class="comment"># 路径是alias的路径加上端口后的，去除location相同后的拼接路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-开启压缩功能"><a href="#4-开启压缩功能" class="headerlink" title="4. 开启压缩功能"></a>4. 开启压缩功能</h3><p><code>gzip</code>:在http的上下文中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; </span><br><span class="line"><span class="comment"># 开启gzip压缩 </span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">100</span>; </span><br><span class="line"><span class="comment"># 低于100个字节响应体将不会被压缩 </span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">4</span>; </span><br><span class="line"><span class="comment"># 设定gzip压缩的级别(1-9)，级别越高压缩比率越低，速率越慢 </span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain text/css; </span><br><span class="line"><span class="attribute">gzip_types</span> text/css application/javascript;</span><br><span class="line"><span class="comment"># 设定某个MIME类型的响应体一定会被压缩，text/html一定会被压缩</span></span><br></pre></td></tr></table></figure><h2 id="六、反向代理"><a href="#六、反向代理" class="headerlink" title="六、反向代理"></a>六、反向代理</h2><p>在Web应用的设计过程，有的时候并不适合直接让客户端和服务端之间相连，而是增加一些中间服务器用于转发请求和响应。如果代理服务器的设计是为了将某个客户端的请求按需从多个服务器当中分配一个的话，那么这个代理服务器就是<strong>反向代理</strong>服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/Barbecue-g/imagehost/Nginx/image-20230824211349351.png" alt="Nginx"></p><p>企业内部的Nginx反向代理和服务器对用户来说都是透明的。</p><p><code>proxy</code>服务器要实现转发客户端的 请求操作，因此要使用另一个指令<code>proxy_pass</code></p><h3 id="1-proxy-pass配置"><a href="#1-proxy-pass配置" class="headerlink" title="1. proxy_pass配置"></a>1. <code>proxy_pass</code>配置</h3><p>反向代理最重要的proxy_pass指令，位于location上下文，用于指定将接收的请求按照其URI参数进行转发</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_pass</span> URL; </span><br><span class="line"><span class="comment"># 将当前请求反向代理到URL参数指定的服务器上面 </span></span><br><span class="line"><span class="comment"># URL可以是协议名(http/https)+主机名或IP地址+端口 或者是 UNIX句柄 + 路径 </span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8000/uri/;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://unix:/tmp/backend.socket:/uri/;</span><br></pre></td></tr></table></figure><p>反向代理还有一些其他的指令可以使用。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> field value; </span><br><span class="line"><span class="comment"># 修改或者增加请求首部之后再转发 默认情况下只转发Host和Connection=close </span></span><br><span class="line"><span class="attribute">proxy_method</span> method;</span><br><span class="line"><span class="comment"># 修改向服务端的方法</span></span><br><span class="line"><span class="attribute">proxy_hide_header</span> field; </span><br><span class="line"><span class="comment"># 隐藏服务端返回响应的首部字段 </span></span><br><span class="line"><span class="attribute">proxy_pass_header</span> field;</span><br><span class="line"><span class="comment"># 显示服务端返回响应的首部字符，如Date，Server之类的 </span></span><br><span class="line"><span class="attribute">proxy_redirect</span> <span class="literal">redirect</span> replacement|default; </span><br><span class="line"><span class="comment"># 当上游服务器反馈的响应是重定向或者刷新请求，proxy_redirect可以重设HTTP头部的location或者refresh字段</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="comment">#在代理过程中保持正确的主机名信息。</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment">#设置转发客户端的真实IP地址</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="comment">#设置转发上一台服务器的IP地址</span></span><br></pre></td></tr></table></figure><h3 id="2-upstream的配置"><a href="#2-upstream的配置" class="headerlink" title="2. upstream的配置"></a>2. <code>upstream</code>的配置</h3><ul><li><code>upstream</code>块位于<strong>HTTP上下文</strong>，它定义了一个<strong>上游服务器的集群</strong>，以便<code>proxy_pass</code>使用。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> name &#123;...&#125; </span><br><span class="line"><span class="comment">#下面是一个例子 </span></span><br><span class="line"><span class="section">upstream</span> backend&#123; </span><br><span class="line">  <span class="attribute">server</span> backend1.example.com weight=<span class="number">5</span>; </span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>; </span><br><span class="line">  <span class="attribute">server</span> unix:/tmp/backend3; </span><br><span class="line">  <span class="attribute">server</span> backup1.example.com backup; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>server</code>指令，出现在<code>upstream</code>上下文，指定一个上游服务器的名字，可以用域名、ip端口或者是UNIX句柄。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span> address [parameters]; </span><br><span class="line"><span class="comment">#parameters可以是下列参数 </span></span><br><span class="line"><span class="comment">#weight=number server的权重，默认是1 </span></span><br><span class="line"><span class="comment">#max_conns=number 限制被代理的服务器的同时连接数，默认0表示无限制</span></span><br><span class="line"><span class="comment">#max_fails=number fail_timeout=3 限制失败次数和超市时间 #backup 表示这个服务器是备胎</span></span><br></pre></td></tr></table></figure><h3 id="3-示例测试"><a href="#3-示例测试" class="headerlink" title="3. 示例测试"></a>3. 示例测试</h3><p>配合上预先定义好的upstream配置块，使用proxy_pass可以以服务器集群为目标进行转发，并且可以根据一定的策略进行选择。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http&#123; </span><br><span class="line">  <span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1234</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1235</span> weight=<span class="number">2</span>; </span><br><span class="line">    <span class="comment"># 设置服务器集群时，如果是nginx的虚拟服务端，需要listen不同的端口，否则无法按策略选择集群 内主机</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">1234</span>; </span><br><span class="line">    <span class="attribute">server_name</span> test1.cc;</span><br><span class="line">    <span class="section">location</span> /&#123; </span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&#x27;test1 <span class="variable">$uri</span>&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">1235</span>; </span><br><span class="line">    <span class="attribute">server_name</span> test2.cc; </span><br><span class="line">    <span class="section">location</span> /&#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&#x27;test2 <span class="variable">$uri</span>&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> localhost; </span><br><span class="line">    <span class="section">location</span> /&#123; </span><br><span class="line">      <span class="attribute">proxy_pass</span> http://backend; <span class="comment">#这里写upstream的名称</span></span><br><span class="line">      <span class="comment"># 多次输入curl http://localhost/abc 转发到的服务器不同</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用proxy_pass时，URI的变化是由location的匹配情况决定的。当客户端的请求URI根据location的情况进入proxy_pass的时候，客户端URI中匹配location的部分，会被proxy_pass的参数替换。</p></blockquote><blockquote><p>如果location使用了正则表达式，proxy_pass的参数不应该包含路径部分。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /abc&#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://example.com/xyz; </span><br><span class="line">  <span class="comment"># test.com/abc --&gt; example.com/xyz </span></span><br><span class="line">  <span class="comment"># test.com/abcdef --&gt; example.com/xyzdef</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、负载均衡"><a href="#七、负载均衡" class="headerlink" title="七、负载均衡"></a>七、负载均衡</h2><p>当单个业务服务端不能承载大量请求时，可以采用多机器部署的方法来解决问题。当用户请求接入的时候，反向代理会从多个业务后端当中选择一个合适的服务端，如果请求分配得比较合理，就可以做到让多个不同机器能分配到合理的负载——在这里，反向代理就完成了<strong>负载均衡</strong>的工作。</p><p>常见变量</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以查阅nginx.org/en/docs/http/ngx_http_upstream_module.html#variables </span></span><br><span class="line">$<span class="attribute">upstream_addr</span> <span class="comment">#上游服务器的ip地址和端口 </span></span><br><span class="line"><span class="variable">$upstream_cache_status</span> <span class="comment">#缓存状态 </span></span><br><span class="line"><span class="variable">$upstream_status</span> <span class="comment">#响应的状态码</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="八、引入第三方模块"><a href="#八、引入第三方模块" class="headerlink" title="八、引入第三方模块"></a>八、引入第三方模块</h2><h3 id="1-下载echo-nginx-module-master"><a href="#1-下载echo-nginx-module-master" class="headerlink" title="1. 下载echo-nginx-module-master"></a>1. 下载<a href="https://github.com/openresty/echo-nginx-module">echo-nginx-module-master</a></h3><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip echo-nginx-module-master.zip </span><br></pre></td></tr></table></figure><h3 id="3-回到nginx的源码目录"><a href="#3-回到nginx的源码目录" class="headerlink" title="3. 回到nginx的源码目录"></a>3. 回到nginx的源码目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.23.3</span><br></pre></td></tr></table></figure><h3 id="4-执行configure命令（生成Makefile文件）"><a href="#4-执行configure命令（生成Makefile文件）" class="headerlink" title="4. 执行configure命令（生成Makefile文件）"></a>4. 执行configure命令（生成Makefile文件）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-dynamic-module=../echo-nginx-module-master</span><br></pre></td></tr></table></figure><blockquote><p>注意：记得添加编译选项<code>--add-dynamic-module</code>，如果有多个动态库，请在后面联合编译</p></blockquote><h3 id="5-执行make命令"><a href="#5-执行make命令" class="headerlink" title="5. 执行make命令"></a>5. 执行make命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make modules</span><br></pre></td></tr></table></figure><h3 id="6-执行安装命令-拷贝操作"><a href="#6-执行安装命令-拷贝操作" class="headerlink" title="6. 执行安装命令(拷贝操作)"></a>6. 执行安装命令(拷贝操作)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="7-使用第三方模块"><a href="#7-使用第三方模块" class="headerlink" title="7. 使用第三方模块"></a>7. 使用第三方模块</h3><p>在配置文件中main上下文中，加载第三方库文件(<code>.so</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_module modules/ngx_http_echo_module.so;</span><br></pre></td></tr></table></figure><p>echo-nginx-module-master在配置文件的使用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attribute">echo</span> <span class="string">&quot;hello,nginx&quot;</span>;<span class="comment">#返回值</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$request</span>;<span class="comment">#请求报文的起始行</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$remote_addr</span>;<span class="comment">#客户端的IP地址</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$host</span>;           <span class="comment">#服务器的IP</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$args</span>;<span class="comment">#所有的查询词</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$is_args</span>;<span class="comment">#代表的是问号</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$arg_key</span>;<span class="comment">#某个查询词的key</span></span><br><span class="line">            <span class="attribute">echo</span> <span class="variable">$arg_wd</span>;<span class="comment">#某个查询词的wd</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="九、Nginx-rtmp搭建直播服务器"><a href="#九、Nginx-rtmp搭建直播服务器" class="headerlink" title="九、Nginx+rtmp搭建直播服务器"></a>九、Nginx+rtmp搭建直播服务器</h2><h3 id="1-安装remp"><a href="#1-安装remp" class="headerlink" title="1.安装remp"></a>1.安装<a href="https://github.com/arut/nginx-rtmp-module">remp</a></h3><ol><li><p>下载remp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip#下载</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip master.zip#解压</span><br></pre></td></tr></table></figure></li><li><p>进入解压后的nginx路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.23.3</span><br></pre></td></tr></table></figure></li><li><p>编译带上rtmp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>启动nginx，检测nginx是否能成功运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-配置remp"><a href="#2-配置remp" class="headerlink" title="2. 配置remp"></a>2. 配置remp</h3><p>在<code>/usr/local/nginx/conf/nginx.conf</code>进行配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">rtmp</span> &#123;</span><br><span class="line">        <span class="section">server</span> &#123;</span><br><span class="line">                <span class="attribute">listen</span> <span class="number">1935</span>;</span><br><span class="line">                <span class="attribute">chunk_size</span> <span class="number">4096</span>;</span><br><span class="line"> </span><br><span class="line">                <span class="attribute">application</span> dir &#123;</span><br><span class="line">                        <span class="attribute">live</span> <span class="literal">on</span>;</span><br><span class="line">                        <span class="attribute">record</span> <span class="literal">off</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>OBS推流，推流地址：<code>rtmp://IP:1935/appname/streamname</code>，本次配置使用的<code>appname</code>为<code>dir</code>，因此推流地址为：<code>rtmp://IP:1935/live/</code>。推流码自定如果为test，则VLC拉流测试需要加上推流码，拉流地址为：<code>rtmp://IP:1935/live/test</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/HTTP"/>
      <url>/HTTP</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><ul><li>URI&#x2F;URL(定位)：即<code>统一资源标识符</code>，作为互联网上资源的唯一身份。</li><li>HTML(展示)：即<code>超文本标记语言</code>，描述超文本文档。</li><li>HTTP(传播)：即<code>超文本传输协议</code>，用来传输超文本。</li></ul><h2 id="HTTP的基本特点"><a href="#HTTP的基本特点" class="headerlink" title="HTTP的基本特点"></a>HTTP的基本特点</h2><p><strong>超文本传输协议（HTTP）</strong>是一个用于传输超媒体文档（例如 HTML）的协议。它最初是为 Web 浏览器与Web服务器之间的通信而设计的。</p><p>HTTP的基本特点如下：</p><ul><li>载荷数据的类型：最初HTTP携带超文本数据，而随着互联网的不断发展，HTTP也可以用于携带其他类型（不限于超媒体文档）的数据载荷。载荷数据通称为<strong>资源</strong>。</li><li>文本协议：HTTP是文本协议，这意味着HTTP报文的头部数据是文本类型的，<strong>用户可以直接阅读报文内容</strong>。</li><li>传输模型：HTTP采用<code>客户端/服务端</code>（C&#x2F;S模型）的传输模型。</li><li>协议的分层：HTTP是一种<strong>应用层</strong>协议，在TCP&#x2F;IP协议族处于第4层，在ISO&#x2F;OSI体系中处于第7层，其依赖的传输层是<code>可靠</code>的协议（比如TCP协议）。</li><li>状态的保存：HTTP是一种<code>无状态</code>协议。(上一次的请求&#x2F;响应对下一次的请求不会造成影响 )</li></ul><h3 id="客户端-服务端模型"><a href="#客户端-服务端模型" class="headerlink" title="客户端&#x2F;服务端模型"></a>客户端&#x2F;服务端模型</h3><p>永远由客户端先发起请求，一个请求必须要对应一个响应。合起来看成，是一个事务。</p><p>TCP协议(第三次握手可以携带信息)可以一端只发送，另一端只接收， 没有强制要求必须对消息进行响应。ACK报文只是<strong>控制报文</strong>。</p><p>从通信模型的角度来看，HTTP和TCP有着显著的差异：TCP会存在一个持续不断的数据流，通信双方按照流的方式交换数据；在HTTP当中，不同的事务之间是彼此独立的。</p><h3 id="无状态协议"><a href="#无状态协议" class="headerlink" title="无状态协议"></a>无状态协议</h3><p>HTTP 是一种<strong>无状态协议</strong>，这意味着服务器在事务结束之后不会保留任何数据（即状态），不同事务在协议层面上彼此分离。对于大多数Web应用，用户可以采用分层的设计，将状态转移到数据库层（比如redis、mysql）或者是客户端（比如cookie）进行存储，这样的话，用户在处理HTTP事务时，就不需要考虑协议交互之间的状态变更，也不需要考虑其他事务的影响，使用起来更加简洁。</p><p>无状态协议有助于服务端的<strong>可扩展性</strong>，如果需要支持更高的并发量，那么只需要简单地部署更多机器就可以解决问题，即支持<strong>水平扩展</strong>。</p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>HTTP一般基于 TCP&#x2F;IP 层，HTTP报文的可靠性是由传输层提供的。所以HTTP的底层一般是TCP协议，但是新版本的HTTP可以不采用TCP。</p><h3 id="文本协议"><a href="#文本协议" class="headerlink" title="文本协议"></a>文本协议</h3><p>HTTP协议是文本协议，至少HTTP请求和响应报文的头部是文本形式的。在有些情况下，可以对HTTP传输的数据进行加密。TLS&#x2F;SSL就是一种加密工具，工作在HTTP和TCP之间。我们把基于TLS协议的HTTP称作HTTPS协议，它提供了更好的安全性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的基本配置</title>
      <link href="/Redis%E7%9A%84%E9%85%8D%E7%BD%AE"/>
      <url>/Redis%E7%9A%84%E9%85%8D%E7%BD%AE</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的基本配置"><a href="#Redis的基本配置" class="headerlink" title="Redis的基本配置"></a>Redis的基本配置</h1><p>请注意文章时间，如果过久将可能不适用</p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-在-Linux-上安装-Redis"><a href="#1-在-Linux-上安装-Redis" class="headerlink" title="1. 在 Linux 上安装 Redis"></a>1. 在 Linux 上安装 Redis</h3><p>大多数主要 Linux 发行版都提供了 Redis 软件包。</p><h4 id="在-Ubuntu-Debian-上安装"><a href="#在-Ubuntu-Debian-上安装" class="headerlink" title="在 Ubuntu&#x2F;Debian 上安装"></a>在 Ubuntu&#x2F;Debian 上安装</h4><p>您可以从官方<code>packages.redis.io</code>APT 存储库安装 Redis 的最新稳定版本。</p><blockquote><p>先决条件</p><p>如果您正在运行一个非常小的发行版（例如 Docker 容器），您可能需要安装<code>lsb-release</code>,<code>curl</code>并且<code>gpg</code>首先：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">sudo</span> apt install lsb-release curl gpg</span><br></pre></td></tr></table></figure></blockquote><p>将存储库添加到索引<code>apt</code>，更新它，然后安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://packages.redis.io/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb <span class="subst">$(lsb_release -cs)</span> main&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/redis.list</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install redis</span><br></pre></td></tr></table></figure><h4 id="从-Snapcraft-安装"><a href="#从-Snapcraft-安装" class="headerlink" title="从 Snapcraft 安装"></a>从 Snapcraft 安装</h4><p><a href="https://snapcraft.io/store">Snapcraft 商店</a>提供了可以安装在支持 snap 的平台上的<a href="https://snapcraft.io/redis">Redis 软件包。</a>大多数主要 Linux 发行版都支持并提供 Snap。</p><p>要通过 snap 安装，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install redis</span><br></pre></td></tr></table></figure><p>如果您的 Linux 当前尚未安装 snap，请按照<a href="https://snapcraft.io/docs/installing-snapd">安装 snapd</a>中所述的说明进行安装。</p><h3 id="2-在-macOS-上安装-Redis"><a href="#2-在-macOS-上安装-Redis" class="headerlink" title="2. 在 macOS 上安装 Redis"></a>2. 在 macOS 上安装 Redis</h3><p>使用 Homebrew 在 macOS 上安装并启动 Redis</p><p>Homebrew 是在 macOS 上安装 Redis 的最简单方法。如果您希望在 macOS 上从源文件构建 Redis，请参阅<a href="https://redis.io/docs/getting-started/installation/install-redis-from-source">从源安装 Redis</a>。</p><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><p>首先，确保您已安装 Homebrew。从终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure><p>如果此命令失败，您需要<a href="https://brew.sh/">按照 Homebrew 安装说明</a>进行操作。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>从终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>这将在您的系统上安装 Redis。</p><h4 id="在前台启动和停止-Redis"><a href="#在前台启动和停止-Redis" class="headerlink" title="在前台启动和停止 Redis"></a>在前台启动和停止 Redis</h4><p>要测试 Redis 安装，您可以<code>redis-server</code>从命令行运行可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如果成功，您将看到 Redis 的启动日志，并且 Redis 将在前台运行。</p><p>要停止 Redis，请输入<code>Ctrl-C</code>。</p><h4 id="使用-launchd-启动和停止-Redis"><a href="#使用-launchd-启动和停止-Redis" class="headerlink" title="使用 launchd 启动和停止 Redis"></a>使用 launchd 启动和停止 Redis</h4><p>作为在前台运行 Redis 的替代方案，您还可以使用<code>launchd</code>在后台启动进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start redis</span><br></pre></td></tr></table></figure><p>这将启动 Redis 并在登录时重新启动。<code>launchd</code>您可以通过运行以下命令来检查托管 Redis 的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services info redis</span><br></pre></td></tr></table></figure><p>如果服务正在运行，您将看到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis (homebrew.mxcl.redis)</span><br><span class="line">Running: ✔</span><br><span class="line">Loaded: ✔</span><br><span class="line">User: miranda</span><br><span class="line">PID: 67975</span><br></pre></td></tr></table></figure><p>要停止该服务，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop redis</span><br></pre></td></tr></table></figure><h4 id="连接到-Redis"><a href="#连接到-Redis" class="headerlink" title="连接到 Redis"></a>连接到 Redis</h4><p>Redis 运行后，您可以通过运行以下命令来测试它<code>redis-cli</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>这将打开 Redis REPL。尝试运行一些命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush demos redis-macOS-demo</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rpop demos</span><br><span class="line"><span class="string">&quot;redis-macOS-demo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-从源安装-Redis"><a href="#3-从源安装-Redis" class="headerlink" title="3. 从源安装 Redis"></a>3. 从源安装 Redis</h3><p>从源代码编译并安装 Redis</p><p>您可以在各种平台和操作系统（包括 Linux 和 macOS）上从源代码编译和安装 Redis。除了 C 编译器和<code>libc</code>.</p><h4 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h4><p>Redis 源文件可从<a href="https://redis.io/download">下载</a>页面获取。<a href="https://github.com/redis/redis-hashes">您可以通过对照redis-hashes git 存储库</a>中的摘要检查这些下载的完整性，以验证这些下载的完整性。</p><p>要从 Redis 下载站点获取最新稳定版本 Redis 的源文件，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/redis-stable.tar.gz</span><br></pre></td></tr></table></figure><h4 id="编译Redis"><a href="#编译Redis" class="headerlink" title="编译Redis"></a>编译Redis</h4><p>要编译 Redis，首先是 tarball，切换到根目录，然后运行<code>make</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-stable</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>如果编译成功，您将在<code>src</code>目录中找到几个Redis二进制文件，包括：</p><ul><li><strong>redis-server</strong>：Redis 服务器本身</li><li><strong>redis-cli</strong>是与 Redis 交互的命令行界面实用程序。</li></ul><p>要在 中安装这些二进制文件<code>/usr/local/bin</code>，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="在前台启动和停止-Redis-1"><a href="#在前台启动和停止-Redis-1" class="headerlink" title="在前台启动和停止 Redis"></a>在前台启动和停止 Redis</h4><p>安装后，您可以通过运行来启动 Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如果成功，您将看到 Redis 的启动日志，并且 Redis 将在前台运行。</p><p>要停止 Redis，请输入<code>Ctrl-C</code>。</p><h2 id="二、安装一些Redis库"><a href="#二、安装一些Redis库" class="headerlink" title="二、安装一些Redis库"></a>二、安装一些Redis库</h2><h3 id="1-安装hiredis"><a href="#1-安装hiredis" class="headerlink" title="1. 安装hiredis"></a>1. 安装<a href="https://github.com/redis/hiredis">hiredis</a></h3><p>通常，您可以使用 C++ 包管理器安装<em>hiredis</em>，这是最简单的方法，例如<code>sudo apt-get install libhiredis-dev</code>。但是，如果您想安装hiredis的最新代码或指定版本（例如异步支持需要hiredis v1.0.0或更高版本），您可以从源代码安装。</p><p>再次注意：请勿安装多个版本的 HIREDIS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/redis/hiredis.git</span><br><span class="line"><span class="built_in">cd</span> hiredis</span><br><span class="line"><span class="built_in">sudo</span> make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><p>默认情况下，<em>hiredis</em>安装在*&#x2F;usr&#x2F;local<em>。如果要将</em>hiredis*安装在非默认位置，请使用以下命令指定安装路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/non/default/path</span><br><span class="line">make PREFIX=/non/default/path install</span><br></pre></td></tr></table></figure><h3 id="2-安装redis-plus-plus"><a href="#2-安装redis-plus-plus" class="headerlink" title="2. 安装redis-plus-plus"></a>2. 安装<a href="https://github.com/sewenew/redis-plus-plus#use-redis-plus-plus-in-your-project">redis-plus-plus</a></h3><p><em>redis-plus-plus</em>是使用<a href="https://cmake.org/">CMAKE</a>构建的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sewenew/redis-plus-plus.git</span><br><span class="line"><span class="built_in">cd</span> redis-plus-plus</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">sudo</span> cmake ..</span><br><span class="line"><span class="built_in">sudo</span> make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>如果<em>hiredis</em>安装在非默认位置，则应使用指定<em>hiredis</em><code>CMAKE_PREFIX_PATH</code>的安装路径。默认情况下，<em>redis-plus-plus</em>安装在*&#x2F;usr&#x2F;local<em>。但是，您可以使用在非默认位置安装</em>redis-plus-plus 。*<code>CMAKE_INSTALL_PREFIX</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_PREFIX_PATH=/path/to/hiredis -DCMAKE_INSTALL_PREFIX=/path/to/install/redis-plus-plus ..</span><br></pre></td></tr></table></figure><p>从 1.3.0 版本开始，默认情况下，<em>redis-plus-plus</em>是按照标准构建的<code>-std=c++17</code>。这样我们就可以使用<a href="https://github.com/sewenew/redis-plus-plus#stringview">std::string_view</a>和<a href="https://github.com/sewenew/redis-plus-plus#optional">std::可选</a>功能。但是，它也可以使用<code>-std=c++11</code>或<code>-std=c++14</code>标准构建，在这种情况下，我们有自己的<code>std::string_view</code>和的简单实现<code>std::optional</code>。为了明确指定 C++ 标准，您可以使用以下 cmake 标志：<code>-DREDIS_PLUS_PLUS_CXX_STANDARD=11</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_PREFIX_PATH=/path/to/hiredis -DCMAKE_INSTALL_PREFIX=/path/to/install/redis-plus-plus -DREDIS_PLUS_PLUS_CXX_STANDARD=11 ..</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：您应该使用相同的标准构建<em>redis-plus-plus</em>和您的应用程序，例如，如果您使用 C++17 标准构建<em>redis-plus-plus ，则还必须使用 C++17 标准构建应用程序代码。</em></p><p>编译<em>redis-plus-plus</em>时，还会编译一个测试程序，这可能需要一段时间。但是，您可以使用以下 cmake 选项禁用构建测试：<code>-DREDIS_PLUS_PLUS_BUILD_TEST=OFF</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_PREFIX_PATH=/path/to/hiredis -DCMAKE_INSTALL_PREFIX=/path/to/install/redis-plus-plus -DREDIS_PLUS_PLUS_BUILD_TEST=OFF ..</span><br></pre></td></tr></table></figure><p>默认情况下，<em>redis-plus-plus</em>同时构建静态库和共享库。如果您只想构建其中一个，可以使用<code>-DREDIS_PLUS_PLUS_BUILD_STATIC=OFF</code>或禁用另一个<code>-DREDIS_PLUS_PLUS_BUILD_SHARED=OFF</code>。</p><p><em>redis-plus-plus</em>默认情况下使用选项构建静态库<code>-fPIC</code>，即位置无关代码。但是，您可以使用 禁用它<code>-DREDIS_PLUS_PLUS_BUILD_STATIC_WITH_PIC=OFF</code>。</p><h2 id="三、主从配置"><a href="#三、主从配置" class="headerlink" title="三、主从配置"></a>三、主从配置</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux创建用户</title>
      <link href="/Linux%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7"/>
      <url>/Linux%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7</url>
      
        <content type="html"><![CDATA[<hr><p>#hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>title: Linux创建用户 #页面标题<br>date: 2023-06-22 9:00:00    #页面创建日期<br>updated: 2024-10-26 23:56:00<br>description: Linux创建用户和权限、文件修改    #描述页面<br>#type:  Linux    #标签、分类和友情链接三个页面需要配置<br>tags:  Linux    #文章标签<br>top_img: “.&#x2F;img&#x2F;0.jpg”  #页面顶部图片<br>cover: “.&#x2F;img&#x2F;C.png”    #文章封面,文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>keywords:  MySQL #页面关键字<br>comments:  true #显示页面评论模块(默认 true)<br>sticky: 0   #置顶越大优先级越高<br>copyright: true    #显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author: Barbecue  #文章版权模块的文章作者<br>copyright_author_href: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io</a> #文章版权模块的文章作者链接<br>copyright_url: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io/</a>    #文章版权模块的文章连结链接<br>copyright_info: 此文章版权归Barbeuce所有，如有转载，请注明明来自原作者  #文章版权模块的版权声明文字<br>toc: true   #单独设置是否有目录<br>toc_number: true    #单独设置是否展示章节数<br>aside:  #显示侧边栏 (默认 true)</p><p>#Error: Spawn failed</p><h1 id="进入站点根目录"><a href="#进入站点根目录" class="headerlink" title="进入站点根目录"></a>进入站点根目录</h1><h1 id="cd-E-hexo"><a href="#cd-E-hexo" class="headerlink" title="cd E:&#x2F;hexo"></a>cd E:&#x2F;hexo</h1><h1 id="删除git提交内容文件夹"><a href="#删除git提交内容文件夹" class="headerlink" title="删除git提交内容文件夹"></a>删除git提交内容文件夹</h1><h1 id="rm-rf-deploy-git"><a href="#rm-rf-deploy-git" class="headerlink" title="rm -rf .deploy_git&#x2F;"></a>rm -rf .deploy_git&#x2F;</h1><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><h1 id="git-config-–global-core-autocrlf-false"><a href="#git-config-–global-core-autocrlf-false" class="headerlink" title="git config –global core.autocrlf false"></a>git config –global core.autocrlf false</h1><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><h1 id="hexo-clean-hexo-g-hexo-d"><a href="#hexo-clean-hexo-g-hexo-d" class="headerlink" title="hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"></a>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</h1><hr><h1 id="Linux创建用户"><a href="#Linux创建用户" class="headerlink" title="Linux创建用户"></a>Linux创建用户</h1><h2 id="1-创建用户："><a href="#1-创建用户：" class="headerlink" title="1. 创建用户："></a>1. 创建用户：</h2><p>创建用户：使用<code>useradd</code>命令创建新用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash username</span><br></pre></td></tr></table></figure><p>将上述命令中的<code>username</code>替换为您要创建的管理员用户名。</p><h2 id="2-设置密码："><a href="#2-设置密码：" class="headerlink" title="2. 设置密码："></a>2. 设置密码：</h2><p>设置密码：使用<code>passwd</code>命令为新用户设置密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd username</span><br></pre></td></tr></table></figure><p>将上述命令中的<code>username</code>替换为您创建的管理员用户名。系统会提示您输入并确认密码。</p><h2 id="3-授予sudo权限："><a href="#3-授予sudo权限：" class="headerlink" title="3. 授予sudo权限："></a>3. 授予sudo权限：</h2><p>将新创建的用户添加到sudo组，以获得管理员权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG sudo username</span><br></pre></td></tr></table></figure><p>将上述命令中的<code>username</code>替换为您创建的管理员用户名。</p><h2 id="4-复制初始用户的权限："><a href="#4-复制初始用户的权限：" class="headerlink" title="4. 复制初始用户的权限：!!!"></a>4. 复制初始用户的权限：!!!</h2><p>复制初始用户的权限：可以使用<code>rsync</code>命令复制初始用户的权限和文件到新用户的主目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -av /home/initial_username/ /home/new_username/</span><br></pre></td></tr></table></figure><p>将上述命令中的<code>initial_username</code>替换为初始用户的用户名，<code>new_username</code>替换为新用户的用户名。</p><h2 id="5-修改新用户的所有权："><a href="#5-修改新用户的所有权：" class="headerlink" title="5. 修改新用户的所有权："></a>5. 修改新用户的所有权：</h2><p>修改新用户的所有权：使用<code>chown</code>命令修改新用户主目录下的文件和目录的所有者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R new_username:new_username /home/new_username</span><br></pre></td></tr></table></figure><p>将上述命令中的<code>new_username</code>替换为新用户的用户名。</p><h2 id="修改-c模版"><a href="#修改-c模版" class="headerlink" title="修改.c模版"></a>修改.c模版</h2><p>先去文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/barbecue/.vim/plugged/prepare-code/snippet</span><br></pre></td></tr></table></figure><p>在此文件夹下可以修改.h、.cpp、.go 、.py等文件</p><p>如果找不到，则使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*snippet*.c&quot;</span><br></pre></td></tr></table></figure><p>用vim打开进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/barbecue/.vim/plugged/prepare-code/snippet/snippet.c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用方法</title>
      <link href="/MySQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"/>
      <url>/MySQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95</url>
      
        <content type="html"><![CDATA[<hr><p>#hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>title: MySQL基本使用 #页面标题<br>date: 2023-06-23 9:00:00    #页面创建日期<br>updated: 2024-10-26 23:56:00<br>description: MySQL的基本使用教程   #描述页面<br>#type:  MySQL    #标签、分类和友情链接三个页面需要配置<br>tags:  MySQL    #文章标签<br>top_img: “.&#x2F;img&#x2F;0.jpg”  #页面顶部图片<br>cover: “.&#x2F;img&#x2F;C.png”    #文章封面,文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>keywords:  MySQL #页面关键字<br>comments:  true #显示页面评论模块(默认 true)<br>sticky: 0   #置顶越大优先级越高<br>copyright: true    #显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author: Barbecue  #文章版权模块的文章作者<br>copyright_author_href: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io</a> #文章版权模块的文章作者链接<br>copyright_url: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io/</a>    #文章版权模块的文章连结链接<br>copyright_info: 此文章版权归Barbeuce所有，如有转载，请注明明来自原作者  #文章版权模块的版权声明文字<br>toc: true   #单独设置是否有目录<br>toc_number: true    #单独设置是否展示章节数<br>aside:  #显示侧边栏 (默认 true)</p><p>#Error: Spawn failed</p><h1 id="进入站点根目录"><a href="#进入站点根目录" class="headerlink" title="进入站点根目录"></a>进入站点根目录</h1><h1 id="cd-E-hexo"><a href="#cd-E-hexo" class="headerlink" title="cd E:&#x2F;hexo"></a>cd E:&#x2F;hexo</h1><h1 id="删除git提交内容文件夹"><a href="#删除git提交内容文件夹" class="headerlink" title="删除git提交内容文件夹"></a>删除git提交内容文件夹</h1><h1 id="rm-rf-deploy-git"><a href="#rm-rf-deploy-git" class="headerlink" title="rm -rf .deploy_git&#x2F;"></a>rm -rf .deploy_git&#x2F;</h1><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><h1 id="git-config-–global-core-autocrlf-false"><a href="#git-config-–global-core-autocrlf-false" class="headerlink" title="git config –global core.autocrlf false"></a>git config –global core.autocrlf false</h1><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><h1 id="hexo-clean-hexo-g-hexo-d"><a href="#hexo-clean-hexo-g-hexo-d" class="headerlink" title="hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"></a>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</h1><hr><h1 id="MySQL基本使用"><a href="#MySQL基本使用" class="headerlink" title="MySQL基本使用"></a>MySQL基本使用</h1><p>使用前需安装库函数与引用头文件</p><p>库函数安装命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>头文件引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span> </span></span><br></pre></td></tr></table></figure><h2 id="1-连接"><a href="#1-连接" class="headerlink" title="1. 连接"></a>1. 连接</h2><p>初始化一个连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL * mysql = mysql_init(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="写类型指令："><a href="#写类型指令：" class="headerlink" title="写类型指令："></a>写类型指令：</h3><p><code>mysql_real_connect</code>函数的原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *<span class="title function_">mysql_real_connect</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *host, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *passwd, <span class="type">const</span> <span class="type">char</span> *db, <span class="type">unsigned</span> <span class="type">int</span> port, <span class="type">const</span> <span class="type">char</span> *unix_socket, <span class="type">unsigned</span> <span class="type">long</span> client_flag)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *ret = mysql_real_connect(mysql,<span class="string">&quot;localgost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&quot;50table&quot;</span>,<span class="number">3306</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>mysql</code>：指向<code>MYSQL</code>结构的指针，用于保存连接相关的信息。</li><li><code>host</code>：要连接的MySQL服务器的主机名或IP地址。</li><li><code>user</code>：用于连接到MySQL服务器的用户名。</li><li><code>passwd</code>：连接MySQL服务器所需的密码。</li><li><code>db</code>：要连接的数据库名称。</li><li><code>port</code>：MySQL服务器的端口号。0为默认情况下，MySQL使用3306端口。</li><li><code>unix_socket</code>：Unix域套接字的路径。如果使用TCP&#x2F;IP连接，则为<code>NULL</code>。</li><li><code>client_flag</code>：客户端标志，用于设置连接的特定选项，例如加密、压缩等。</li></ul><p>检查报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ret =<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;mysql connect error:%s\n&quot;</span>,mysql_error(mysq1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> qret = mysql_query(mysql,sql);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(ret =NULL)&#123;</span><br><span class="line">fprintf(stderr,&quot;SQL statement error:%s\n&quot;,mysql_error(mysq1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读类型指令"><a href="#读类型指令" class="headerlink" title="读类型指令"></a>读类型指令</h3><p>基本步骤：</p><ol><li><p>执行查询语句：</p><p>使用<code>mysql_query</code>函数执行查询语句，并将结果存储在<code>MYSQL_RES</code>类型的变量中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_RES *result;</span><br><span class="line">mysql_query(mysql, <span class="string">&quot;SELECT * FROM table_name&quot;</span>);</span><br><span class="line">res = mysql_store_result(mysql);</span><br></pre></td></tr></table></figure><p>上述示例中，<code>connection</code>是已经建立好的MySQL连接对象，”SELECT * FROM table_name”是查询语句，<code>mysql_query</code>用于执行查询，<code>mysql_store_result</code>用于将结果存储在<code>result</code>变量中。</p></li><li><p>处理结果集：</p><p>使用<code>mysql_num_fields</code>函数获取结果集中的字段数目，使用<code>mysql_fetch_row</code>函数逐行获取结果集的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num_fields = mysql_num_fields(res);</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="keyword">while</span> ((row = mysql_fetch_row(res)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\t&quot;</span>, row[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例中，<code>mysql_num_fields</code>用于获取结果集的字段数目，<code>mysql_fetch_row</code>用于逐行获取结果集中的数据。通过循环遍历每行数据，并在内部循环中逐个字段打印出来。</p></li><li><p>释放结果集：</p><p>使用<code>mysql_free_result</code>函数释放结果集的内存空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_free_result(result);</span><br></pre></td></tr></table></figure><p>当您完成对结果集的使用后，应该使用<code>mysql_free_result</code>函数释放结果集所占用的内存空间。</p></li></ol><p>请注意，在使用<code>MYSQL_RES</code>时，需要先执行查询语句并获得结果集，然后通过逐行遍历和处理结果集中的数据。最后，务必释放结果集的内存空间以避免内存泄漏。</p><h2 id="2-增"><a href="#2-增" class="headerlink" title="2. 增"></a>2. 增</h2><p>创建一个新的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>使用某个数据库，可以使用use语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure><p>创建一张表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> CREATE TABLE table_name (</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  filename VARCHAR(256),</span><br><span class="line">  username VARCHAR(256),</span><br><span class="line">  pre_id INT,</span><br><span class="line">  filetype CHAR(1),</span><br><span class="line">  filepath VARCHAR(512),</span><br><span class="line">  isdelet INT,</span><br><span class="line">  md5 VARCHAR(1024),</span><br><span class="line">  UNIQUE KEY (username(256), filepath(512))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>增加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name VALUES (value1, value2,...valueN);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>增加列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">ADD 列名 数据类型 [列约束];</span><br></pre></td></tr></table></figure><h2 id="3-删"><a href="#3-删" class="headerlink" title="3. 删"></a>3. 删</h2><p>删除一个数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>删除一个数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name ;</span><br></pre></td></tr></table></figure><p>数据表中删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause];</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">DROP COLUMN 列名;</span><br></pre></td></tr></table></figure><h2 id="4-改"><a href="#4-改" class="headerlink" title="4. 改"></a>4. 改</h2><p>修改数据表数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET 列名1 = 新值1, 列名2 = 新值2, ...</span><br><span class="line">WHERE 条件;</span><br></pre></td></tr></table></figure><p>修改列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">MODIFY 列名 新数据类型 [新列约束];</span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 旧表名</span><br><span class="line">RENAME TO 新表名;</span><br></pre></td></tr></table></figure><h2 id="5-查"><a href="#5-查" class="headerlink" title="5. 查"></a>5. 查</h2><p>筛选！！！</p><p>不等于：&lt;&gt;</p><p>时间可以比大小</p><p>逻辑运算：与<code>and</code>或<code>or</code><code>and</code>优先级高于<code>or</code></p><p>通配符：模糊匹配like中<code>%</code>匹配任意字符串<code>_</code>匹配单一字符</p><p>空值：is nullis not null</p><p>聚集函数：在select后的field1前面加函数如：<code>select max(field1)</code><code>select min(field1)</code><code>select avg(field1)</code></p><p>分组聚集：结果将按照<code>分组条件</code>分组 <code>group by 子句（分组聚集)</code>如<code>SELECT customer_id FROM orders GROUP BY sex</code></p><p>展示数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc table_name;</span><br><span class="line">describle table_name;</span><br></pre></td></tr></table></figure><p>查找语句<code>SELECT</code>语句用于从数据库表中检索数据，并将其作为结果集返回。以下是<code>SELECT</code>语句的一般语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名1, 列名2, ...</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 条件</span><br><span class="line">GROUP BY 列名</span><br><span class="line">HAVING 条件</span><br><span class="line">ORDER BY 列名 [ASC|DESC];</span><br></pre></td></tr></table></figure><p>具体步骤如下：</p><ol><li>使用<code>SELECT</code>关键字指定要检索的列名。使用通配符<code>*</code>选择所有列。</li><li>使用<code>FROM</code>关键字指定要从中检索数据的表名。对于多个表，可以使用<code>JOIN</code>操作符进行表连接。</li><li>可选：使用<code>WHERE</code>关键字指定筛选条件，限制要返回的行。如果省略<code>WHERE</code>子句，将返回表中的所有行。</li><li>可选：使用<code>GROUP BY</code>关键字按照指定的列对结果进行分组。<code>GROUP BY</code>通常与聚合函数（如<code>SUM</code>、<code>COUNT</code>、<code>AVG</code>等）一起使用。</li><li>可选：使用<code>HAVING</code>关键字指定分组后的筛选条件，<code>HAVING</code>子句用于对分组后的结果集进行筛选。</li><li>可选：使用<code>ORDER BY</code>关键字按照指定的列对结果进行排序，默认升序。可以附加<code>ASC</code>关键字表示升序（默认），或<code>DESC</code>关键字表示降序。</li></ol><p>排序：order by默认升序。后加<code>ASC</code>或<code>DESC</code>，表示升序或降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br><span class="line">ORDER BY condition1,condition2 DESC;</span><br></pre></td></tr></table></figure><p>内连接：将两个表的行连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名</span><br><span class="line">FROM 表1</span><br><span class="line">INNER JOIN 表2 ON 表1.列 = 表2.列;</span><br></pre></td></tr></table></figure><h2 id="6-常见类型"><a href="#6-常见类型" class="headerlink" title="6. 常见类型"></a>6. 常见类型</h2><ol><li>整数类型（Integer Types）：<ul><li>TINYINT：1字节，范围为-128到127（有符号）或0到255（无符号）</li><li>SMALLINT：2字节，范围为-32768到32767（有符号）或0到65535（无符号）</li><li>MEDIUMINT：3字节，范围为-8388608到8388607（有符号）或0到16777215（无符号）</li><li>INT或INTEGER：4字节，范围为-2147483648到2147483647（有符号）或0到4294967295（无符号）</li><li>BIGINT：8字节，范围为-9223372036854775808到9223372036854775807（有符号）或0到18446744073709551615（无符号）</li></ul></li><li>浮点数类型（Floating-Point Types）：<ul><li>FLOAT(M, D)：4字节，单精度浮点数</li><li>DOUBLE(M, D)：8字节，双精度浮点数</li></ul></li><li>定点数类型（Fixed-Point Types）：<ul><li>DECIMAL(M, D)：存储精确小数，M表示总位数，D表示小数点后的位数</li></ul></li><li>字符串类型（String Types）：<ul><li>CHAR(M)：固定长度字符串，最多255个字符</li><li>VARCHAR(M)：可变长度字符串，最多65535个字符</li><li>TEXT：可变长度的大文本对象，最多65535个字符</li></ul></li><li>日期和时间类型（Date and Time Types）：<ul><li>DATE：日期，格式为’YYYY-MM-DD’</li><li>TIME：时间，格式为’HH:MM:SS’</li><li>DATETIME：日期和时间，格式为’YYYY-MM-DD HH:MM:SS’</li><li>TIMESTAMP：日期和时间，自1970年1月1日以来的秒数表示</li><li>YEAR：年份，范围为1901到2155</li></ul></li><li>布尔类型（Boolean Type）：<ul><li>BOOL或BOOLEAN：存储true或false</li></ul></li></ol><h2 id="7-常见约束"><a href="#7-常见约束" class="headerlink" title="7. 常见约束"></a>7. 常见约束</h2><ol><li><p>主键约束（Primary Key Constraint）：</p><ul><li><p>主键用于唯一标识表中的每一行数据，并确保数据的唯一性。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE customers (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  email VARCHAR(100)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>非空约束（Not Null Constraint）：</p><ul><li><p>非空约束确保列中的值不能为空。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">  id INT,</span><br><span class="line">  name VARCHAR(50) NOT NULL,</span><br><span class="line">  age INT NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>唯一约束（Unique Constraint）：</p><ul><li><p>唯一约束确保列中的值在表中是唯一的，允许空值。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE products (</span><br><span class="line">  id INT,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  code VARCHAR(10) UNIQUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建多列唯一约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (</span><br><span class="line">    列1 数据类型,</span><br><span class="line">    列2 数据类型,</span><br><span class="line">    列3 数据类型,</span><br><span class="line">    CONSTRAINT 约束名 UNIQUE (列1, 列2, 列3)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">ADD CONSTRAINT 约束名 UNIQUE (列1, 列2, ...);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>外键约束（Foreign Key Constraint）：</p><ul><li><p>外键约束用于建立表之间的关联，确保引用表中的数据存在于被引用表中的列中。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE orders (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  customer_id INT,</span><br><span class="line">  total_amount DECIMAL(10, 2),</span><br><span class="line">  FOREIGN KEY (customer_id) REFERENCES customers(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查约束（Check Constraint）：</p><ul><li><p>检查约束用于定义列中的值必须满足的条件。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE products (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  quantity INT,</span><br><span class="line">  price DECIMAL(10, 2),</span><br><span class="line">  CHECK (quantity &gt;= 0 AND price &gt;= 0)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>默认约束（Default Constraint）：</p><ul><li><p>默认约束用于为列指定默认值。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  age INT,</span><br><span class="line">  employment_date DATE DEFAULT CURRENT_DATE()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><p>在数据库命令行中输入以下内容，显示数据库的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version(), current_date;</span><br></pre></td></tr></table></figure><p>show语句可以展示当前服务端已经存在的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>show语句展示当前选择的数据库当中的所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL配置</title>
      <link href="/MySQL%E9%85%8D%E7%BD%AE"/>
      <url>/MySQL%E9%85%8D%E7%BD%AE</url>
      
        <content type="html"><![CDATA[<hr><p>#hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>title: MySQL基本配置 #页面标题<br>date: 2023-06-22 9:00:00    #页面创建日期<br>updated: 2024-10-26 23:56:00<br>description: MySQL的基本配置教程   #描述页面<br>#type:  MySQL    #标签、分类和友情链接三个页面需要配置<br>tags:  MySQL    #文章标签<br>top_img: “.&#x2F;img&#x2F;0.jpg”  #页面顶部图片<br>cover: “.&#x2F;img&#x2F;C.png”    #文章封面,文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>keywords:  MySQL #页面关键字<br>comments:  true #显示页面评论模块(默认 true)<br>sticky: 0   #置顶越大优先级越高<br>copyright: true    #显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author: Barbecue  #文章版权模块的文章作者<br>copyright_author_href: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io</a> #文章版权模块的文章作者链接<br>copyright_url: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io/</a>    #文章版权模块的文章连结链接<br>copyright_info: 此文章版权归Barbeuce所有，如有转载，请注明明来自原作者  #文章版权模块的版权声明文字<br>toc: true   #单独设置是否有目录<br>toc_number: true    #单独设置是否展示章节数<br>aside:  #显示侧边栏 (默认 true)</p><p>#Error: Spawn failed</p><h1 id="进入站点根目录"><a href="#进入站点根目录" class="headerlink" title="进入站点根目录"></a>进入站点根目录</h1><h1 id="cd-E-hexo"><a href="#cd-E-hexo" class="headerlink" title="cd E:&#x2F;hexo"></a>cd E:&#x2F;hexo</h1><h1 id="删除git提交内容文件夹"><a href="#删除git提交内容文件夹" class="headerlink" title="删除git提交内容文件夹"></a>删除git提交内容文件夹</h1><h1 id="rm-rf-deploy-git"><a href="#rm-rf-deploy-git" class="headerlink" title="rm -rf .deploy_git&#x2F;"></a>rm -rf .deploy_git&#x2F;</h1><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><h1 id="git-config-–global-core-autocrlf-false"><a href="#git-config-–global-core-autocrlf-false" class="headerlink" title="git config –global core.autocrlf false"></a>git config –global core.autocrlf false</h1><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><h1 id="hexo-clean-hexo-g-hexo-d"><a href="#hexo-clean-hexo-g-hexo-d" class="headerlink" title="hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"></a>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</h1><hr><h1 id="MySQL基本配置"><a href="#MySQL基本配置" class="headerlink" title="MySQL基本配置"></a>MySQL基本配置</h1><h2 id="1-MySQL-8-0-5-7的安装"><a href="#1-MySQL-8-0-5-7的安装" class="headerlink" title="1. MySQL 8.0&#x2F;5.7的安装"></a>1. MySQL 8.0&#x2F;5.7的安装</h2><p><font color=#0099ff> <em><strong>注意</strong></em>：Ubuntu 20以及以上的版本无需此操作 </font></p><p>下面的wget命令用于下载mysql-apt-config ，也可以从本地服务器当中下载到Linux中 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.<span class="number">8</span>.<span class="number">22</span>-<span class="number">1</span>_all.deb </span><br></pre></td></tr></table></figure><p>安装mysql-apt-config </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config_0.<span class="number">8</span>.<span class="number">22</span>-<span class="number">1</span>_all.deb</span><br></pre></td></tr></table></figure><p>使用上下方向键移动选项和enter键选定选项，使得MySQL服务端的版本是8.0（或者是5.7）</p><h3 id="升级ubuntu的apt和安装mysql"><a href="#升级ubuntu的apt和安装mysql" class="headerlink" title="升级ubuntu的apt和安装mysql:"></a>升级ubuntu的apt和安装mysql:</h3><p>升级ubuntu的apt </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装服务端和命令行客户端</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>如果出现密码输入请输入密码</p><p>如果出现密码验证模式的选择，最好选择”Legacy Authentication Method”。</p><h2 id="2-用户登陆和密码修改"><a href="#2-用户登陆和密码修改" class="headerlink" title="2. 用户登陆和密码修改"></a>2. 用户登陆和密码修改</h2><p>使用下面的命令如果可以登录成功，说明安装成功，否则需要执行手动修改密码的过程：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 首先在命令行当中输入下列命令 </span><br><span class="line">mysql -u root -p </span><br><span class="line"># 随后输入刚才设置的密码（如果未设置密码需要手动修改登录密码）</span><br></pre></td></tr></table></figure><h3 id="手动修改登录密码"><a href="#手动修改登录密码" class="headerlink" title="手动修改登录密码:"></a>手动修改登录密码:</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><p>在登录之后输入如下的命令可以修改root的访问方式<font color=#0099ff>(下面方法适用于5.7版本)</font>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update mysql.user set</span><br><span class="line">authentication_string=password(&#x27;你的密码&#x27;) where user=&#x27;root&#x27; and Host =&#x27;localhost&#x27;;</span><br><span class="line">update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p><font color=#0099ff>下面方法适用于8.0版本:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p><font color=#0099ff>下面的password换成你的密码:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><p>连接到MySQL服务端</p><p>使用命令行客户端连接mysql服务端的命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>随后在提示符之后输入密码即可 ,登录成功会显示命令提示符 </p><p>mysql&gt; </p><h2 id="3-删除MySQL的方法"><a href="#3-删除MySQL的方法" class="headerlink" title="3. 删除MySQL的方法"></a>3. 删除MySQL的方法</h2><p>请不要自己随意卸载mysql，很容易导致无法再次安装。如需卸载，请参考下面的链接：</p><p><a href="https://blog.csdn.net/iehadoop/article/details/82961264">Ubuntu18.04彻底删除MySQL数据库青蛙组长的博客*-CSDN*博客ubuntu 删除mysql</a></p><h2 id="4-外网连接数据库"><a href="#4-外网连接数据库" class="headerlink" title="4.外网连接数据库"></a>4.外网连接数据库</h2><p>本教程只是Linux中的设置，具体软件的安装(navicat、DataGrip)请参考其他教程</p><p>在一台电脑上安装了MySQL服务器后，默认是不允许外网可以连接至该服务器上的MySQL的，不进行额外配置的话可能会出现如下两种连接错误的情况。</p><h3 id="解决问题一"><a href="#解决问题一" class="headerlink" title="解决问题一"></a>解决问题一</h3><p>首先使用如下命令查看3306端口绑定状态</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -an | grep <span class="number">3306</span></span><br></pre></td></tr></table></figure><p>3306端口是默认绑定在本地IP 127.0.0.1上的，所以外网无法访问该主机的3306端口。</p><p>打开MySQL的配置文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>讲端口port &#x3D;3306解除注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port            = 3306</span><br></pre></td></tr></table></figure><p>找到如下内容的一行并注释掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bind-address          = 127.0.0.1</span><br></pre></td></tr></table></figure><p>将mysqlx-bind-address的网址改成0.0.0.0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlx-bind-address     = 0.0.0.0</span><br></pre></td></tr></table></figure><p>保存后重启MySQL服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>使用如下命令查看端口绑定状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -an | grep 3306</span><br></pre></td></tr></table></figure><p>没有127.0.0.1就是正确的</p><h3 id="解决问题二"><a href="#解决问题二" class="headerlink" title="解决问题二"></a>解决问题二</h3><p>问题二是因为MySQL自带的权限控制限制了外网访问MySQL服务器，在Ubuntu主机上使用命令行连接至本地MySQL数据库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -root -p</span><br></pre></td></tr></table></figure><p>输入密码</p><p>选择mysql数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure><p>查看user表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><p>发现账户只允许localhost访问，所以外网无法访问。</p><p>新建一个用户进行连接</p><p>运行以下命令创建一个新用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;username&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure><p>将<code>username</code>替换为您要创建的用户名，将<code>password</code>替换为该用户的密码。<code>&#39;localhost&#39;</code>表示用户只能从本地主机连接到MySQL服务器。</p><p>因为要允许该用户从任何主机连接到MySQL服务器，所以将<code>&#39;localhost&#39;</code>替换为<code>&#39;%&#39;</code>了。</p><p>授予用户对所有数据库的全部权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;username&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><p>运行以下命令使更改生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>再查看表中的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><p>如果想通过root用户进行连接</p><p>可以使用如下命令给外网访问授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;[允许的ip]&#x27; identified by &#x27;[密码]&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>其中[允许的ip]如果设置为%的话则表示所有ip都可以访问，[密码]表示外网访问的密码是什么。比如我设置成所有ip都可访问，密码是root，则命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>再查看表中的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><p>经过以上操作后，就可以在可视化数据库软件连接的地方输入你的用户名和密码进行连接。</p>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/Python"/>
      <url>/Python</url>
      
        <content type="html"><![CDATA[<hr><p>title: Python #页面标题<br>date: 2023-04-4 22:00:00    #页面创建日期<br>updated: 2024-10-26 23:56:00<br>description: Python基础的常用语法，当笔记使用  #描述页面<br>#type:   Python基础   #标签、分类和友情链接三个页面需要配置<br>tags:   Python   #文章标签<br>top_img: “.&#x2F;img&#x2F;0.jpg”   #页面顶部图片<br>cover: “.&#x2F;img&#x2F;python.jpg”    #文章封面,文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>keywords:  Python #页面关键字<br>comments:  true #显示页面评论模块(默认 true)<br>sticky: 0   #置顶越大优先级越高<br>copyright: true    #显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author: Barbecue  #文章版权模块的文章作者<br>copyright_author_href: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io</a> #文章版权模块的文章作者链接<br>copyright_url: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io/</a>    #文章版权模块的文章连结链接<br>copyright_info: 此文章版权归Barbeuce所有，如有转载，请注明明来自原作者  #文章版权模块的版权声明文字<br>toc: true   #单独设置是否有目录<br>toc_number: true    #单独设置是否展示章节数<br>aside:  #显示侧边栏 (默认 true)</p><hr><p><img src="/./img/python.jpg" alt="Python"></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><p>反斜杠\;把反斜杠的和后面一起读(r或R后跟单引号可以取消读取单引号里的转义字符“\b”就可以直接打出来，而不是退格)</p><p>三引号‘’’‘’’:三个用于扩起来内容</p><p>算数运算：a**b(a的b次方)a&#x2F;&#x2F;b(a整除b向下去整(负数也是))a%b(a%b去余数)</p><p> 逻辑运算：and(&amp;)与or(|)或not(~)非(^)异或</p><p>列表：[a,b](可变)列表.append(x)：添加x到列表列表.remove(x)：在列表中删除xmax&#x2F;min(列表)：列表中的最大&#x2F;小值sorted(列表)：排好序的列表</p><p>元组：(a,b)(不可变,便于放进字典)</p><p>字典：{a,b}(不可变,键值对)字典[“A”]&#x3D;xxx(对A这个键进行增加或附值)del 字典(删除字典键”A”)字典.keys()：返回所有贱字典.values()：所有值字典.items()：所有键值对</p><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><p>整数化int(x) 浮点数化float(x) 复数化complex(x,y) 转化字符串str(x) </p><p>十进制转ASCII&#x2F;反过来chr(x)&#x2F;ord(x) 2&#x2F;8&#x2F;16进制转换bin(x)&#x2F;oct(x)&#x2F;hex(x)</p><p>if—else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>：<span class="comment">#不需要括号</span></span><br><span class="line">子代码模块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">子代码模块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">子代码模块<span class="number">3</span></span><br></pre></td></tr></table></figure><p>while</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件：<span class="comment">#不需要括号</span></span><br><span class="line">子代码模块<span class="number">1</span></span><br></pre></td></tr></table></figure><p>for</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 可迭代对象：（循环一次接收一次，和C++、java不一样）</span><br><span class="line">子代码模块</span><br><span class="line"><span class="keyword">break</span> （跳出当前循环）</span><br><span class="line"><span class="keyword">continue</span>（跳到当前循环的开始）</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>):</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值（无就写<span class="literal">None</span>）</span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">被继承的类名</span>):</span><br><span class="line">def__init__(<span class="variable language_">self</span>,属性A,属性B,属性C,属性D):</span><br><span class="line">    <span class="variable language_">self</span>.属性<span class="number">1</span>=属性A</span><br><span class="line">    <span class="variable language_">self</span>.属性<span class="number">2</span>=属性B</span><br><span class="line">    <span class="built_in">super</span>().__init__(属性C,属性D)<span class="comment">#调用父类的属性C,属性D，并作为本子类的属性C,属性D无需再次定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">方法1</span>(<span class="params">self,参数A,参数B</span>):</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">方法2</span>(<span class="params">self,参数C,参数D</span>):<span class="comment">#如果调用方法时候没有此方法，则会去调用父类的方法</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="三、内置函数"><a href="#三、内置函数" class="headerlink" title="三、内置函数"></a>三、内置函数</h2><p>Id(x)：（看见x内存中的地址）</p><p>type(x)：返回x的数据结构类型</p><p>len(x)：返回对象x的长度（可以是字符串，列表，元组，字典等）</p><p>del(x)：删除对象x（可以是字符字，符串，列表等）</p><p>range (开始,停止,递增的值)</p><p>Input(“用户的提示”)：返回一个字符串为用户输入的内容</p><p>x.upper()：将字符串x全部转换为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">format</span>()：</span><br><span class="line">eg：<span class="string">&quot;我是一个&#123;0&#125;新手&quot;</span>.<span class="built_in">format</span>(参数)</span><br><span class="line"><span class="string">&quot;我是&#123;name&#125;今年&#123;year:.2f&#125;岁了&quot;</span>.<span class="built_in">format</span>(year=传参，name=传参)</span><br><span class="line"><span class="comment">#顺序不一样也可以,&quot;:.2f&quot;可以保留2位小数</span></span><br><span class="line">定义year，name后<span class="string">f&quot;我是<span class="subst">&#123;name&#125;</span>今年<span class="subst">&#123;year&#125;</span>岁了&quot;</span>中会被直接传值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f(文件对象命名)=<span class="built_in">open</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())<span class="comment">#会读全部文件内容</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())<span class="comment">#会读一行文件内容</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())<span class="comment">#会读全部文件内容，并把每行作为列表元素返回</span></span><br><span class="line">f.close()<span class="comment">#关闭文件，释放资源</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="keyword">as</span> f(文件对象命名):<span class="comment">#不需要释放资源</span></span><br><span class="line">  <span class="comment">#对文件写入，如果没有文件则会创建，如果有文件则会清空</span></span><br><span class="line">  <span class="comment">#此时&quot;w&quot;可以替换为&quot;a&quot;，a为附加不会清空</span></span><br><span class="line">  <span class="comment">#如果既读又写，则将&quot;w&quot;替换成&quot;r+&quot;,此时就可以读写都进行，且写入时候是附加模式</span></span><br><span class="line">  f.write(<span class="string">&quot;hello\n&quot;</span>)<span class="comment">#有\n才能换行</span></span><br></pre></td></tr></table></figure><p>捕捉异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类似if-elif-else</span></span><br><span class="line"><span class="keyword">try</span>:<span class="comment">#可能产生错误的代码</span></span><br><span class="line">  user_weight = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入体重&quot;</span>))</span><br><span class="line">  user_height=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入身高&quot;</span>))</span><br><span class="line">  user_BMI=user_weight/user_height ** <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> ValueError:<span class="comment">#产生值错误时运行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;输入不为合理数字，请重新运行程序&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:<span class="comment">#产生除0错误时运行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;被除数不能为0，请重新运行程序&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:<span class="comment">#产生其他错误时运行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;发生了未知错误，请重新运行程序&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#没有错误时运行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;您的BMI值&quot;</span>+<span class="built_in">str</span>(user_BMI))</span><br><span class="line"><span class="keyword">finally</span>:<span class="comment">#不管发生错误与否都会运行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;程序运行结束&quot;</span>)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span><span class="number">1</span>+<span class="number">1</span>&gt;<span class="number">2</span></span><br><span class="line"><span class="comment">#断言，后面可以跟任何布尔表达式，测试时在assert后面跟上认为应该为True的表达式</span></span><br><span class="line"><span class="comment">#AssertionError断言错误后，会直接终止程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单元测试库unittest需要把测试代码放在独立文件里面</span></span><br><span class="line"><span class="comment">#demo.py文件中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_adder</span>(<span class="params">x,y</span>):</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line"><span class="comment">#test文件中</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> my_adder<span class="comment">#同一文件夹下，from 文件名 import 函数名/类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMyAdder</span>(unittest.TestCase):<span class="comment">#继承unittest.TestCase的各种测试功能</span></span><br><span class="line">  <span class="keyword">def</span><span class="title function_">test_positive_with_positive</span>(<span class="params">self</span>):<span class="comment">#定义不同的测试用例，每个都是类下面的方法</span></span><br><span class="line">    <span class="keyword">assert</span> my_adder(<span class="number">5</span>,<span class="number">3</span>)==<span class="number">8</span><span class="comment">#如果错误，程序中断</span></span><br><span class="line">  <span class="keyword">def</span><span class="title function_">test_negative_with_positive</span>(<span class="params">self</span>):<span class="comment">#名字必须test_开头，才能被当成测试用例</span></span><br><span class="line">    <span class="variable language_">self</span>.assertEqual(my_adder(<span class="number">2</span>,<span class="number">3</span>),<span class="number">5</span>)<span class="comment">#assert A==B</span></span><br><span class="line">    <span class="variable language_">self</span>.assertTrue(my_adder(<span class="number">2</span>,<span class="number">3</span>),<span class="number">5</span>)<span class="comment">#assert A is True</span></span><br><span class="line">    <span class="variable language_">self</span>.assertInl(my_adder(<span class="number">2</span>,<span class="number">3</span>),<span class="number">5</span>)<span class="comment">#assert A in B</span></span><br><span class="line">    <span class="variable language_">self</span>.assertNotEqual(my_adder(<span class="number">2</span>,<span class="number">3</span>),<span class="number">5</span>)<span class="comment">#assert A!=B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当测试类时，为了调用类方法，需要创建实例对象，此时就可以使用TestCase类里面的setUp方法</span></span><br><span class="line"><span class="comment">#demo.py文件中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Barbecue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">len_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.name)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name.upper()</span><br><span class="line"><span class="comment">#test文件中</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> Barbecue</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestSentence</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):<span class="comment">#在运行各个测试test_之前setUp都会被调用一次，这样就不用重复创建对象</span></span><br><span class="line">        <span class="variable language_">self</span>.name = Barbecue(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_str_count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEquals(<span class="variable language_">self</span>.name.len_name(),<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_word_count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEquals(<span class="variable language_">self</span>.name.call_name(), <span class="string">&quot;HELLO&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、标准库"><a href="#四、标准库" class="headerlink" title="四、标准库"></a>四、标准库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">引入</span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="built_in">print</span>(模块名.函数名())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span>函数名<span class="comment">#直接单独引用模块中的函数或变量</span></span><br><span class="line"><span class="built_in">print</span>(函数名())</span><br><span class="line"></span><br><span class="line">form 模块名 <span class="keyword">import</span> *<span class="comment">#引入模块中所有函数和变量</span></span><br></pre></td></tr></table></figure><h2 id="五、爬虫"><a href="#五、爬虫" class="headerlink" title="五、爬虫"></a>五、爬虫</h2><h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="***Scrapy!!!"></a>***Scrapy!!!</h3><p>1、mac安装scrapy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure><p>2、方法一：mac默认的是python2.x，所以scrapy命令用不了需要使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m scrapy ...</span><br></pre></td></tr></table></figure><p>3、方法二：将python&#x2F;bin目录下的scrapy命令文件复制到&#x2F;usr&#x2F;local&#x2F;bin目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Users/barbeuce/Library/Python/3.9/bin/scrapy</span><br><span class="line">/usr/local/bin</span><br></pre></td></tr></table></figure><h3 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目名</span><br></pre></td></tr></table></figure><p>二、创建爬虫文件(进入spiders文件夹)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider 文件名 域名</span><br></pre></td></tr></table></figure><p>三、运行爬虫代码（需要进入到spiders文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫的名字</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git"/>
      <url>/git</url>
      
        <content type="html"><![CDATA[<hr><p>#hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>title: git #页面标题<br>date: 2023-06-22 9:00:00    #页面创建日期<br>updated: 2024-10-26 23:56:00<br>description: git部分基本操作    #描述页面<br>#type:  git    #标签、分类和友情链接三个页面需要配置<br>tags:  git    #文章标签<br>categories: git<br>top_img: “.&#x2F;img&#x2F;0.jpg”  #页面顶部图片<br>cover: “.&#x2F;img&#x2F;C.png”    #文章封面,文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)<br>keywords:  MySQL #页面关键字<br>comments:  true #显示页面评论模块(默认 true)<br>sticky: 0   #置顶越大优先级越高<br>copyright: true    #显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author: Barbecue  #文章版权模块的文章作者<br>copyright_author_href: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io</a> #文章版权模块的文章作者链接<br>copyright_url: <a href="https://barbecue-g.github.io/">https://barbecue-g.github.io/</a>    #文章版权模块的文章连结链接<br>copyright_info: 此文章版权归Barbeuce所有，如有转载，请注明明来自原作者  #文章版权模块的版权声明文字<br>toc: true   #单独设置是否有目录<br>toc_number: true    #单独设置是否展示章节数<br>aside:  #显示侧边栏 (默认 true)</p><p>#Error: Spawn failed</p><h1 id="进入站点根目录"><a href="#进入站点根目录" class="headerlink" title="进入站点根目录"></a>进入站点根目录</h1><h1 id="cd-E-hexo"><a href="#cd-E-hexo" class="headerlink" title="cd E:&#x2F;hexo"></a>cd E:&#x2F;hexo</h1><h1 id="删除git提交内容文件夹"><a href="#删除git提交内容文件夹" class="headerlink" title="删除git提交内容文件夹"></a>删除git提交内容文件夹</h1><h1 id="rm-rf-deploy-git"><a href="#rm-rf-deploy-git" class="headerlink" title="rm -rf .deploy_git&#x2F;"></a>rm -rf .deploy_git&#x2F;</h1><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><h1 id="git-config-–global-core-autocrlf-false"><a href="#git-config-–global-core-autocrlf-false" class="headerlink" title="git config –global core.autocrlf false"></a>git config –global core.autocrlf false</h1><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><h1 id="hexo-clean-hexo-g-hexo-d"><a href="#hexo-clean-hexo-g-hexo-d" class="headerlink" title="hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"></a>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</h1><hr><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><p>查看git状态和后续git建议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>将untracked状态到staged状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p>将staged状态到untracked状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged</span><br></pre></td></tr></table></figure><p>将所提交内容融入分支（unmodify）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot; &quot;</span><br></pre></td></tr></table></figure><p>“ “中是备注信息</p><p>查看所有分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --all </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --all --graph</span><br></pre></td></tr></table></figure><p>查看分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><p> 切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 主动方</span><br></pre></td></tr></table></figure><p>合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 被动方</span><br></pre></td></tr></table></figure><p>将仓库的git拉下来修改后提交上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">git fetch origin master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><h2 id="安装和配置git"><a href="#安装和配置git" class="headerlink" title="安装和配置git"></a>安装和配置git</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h3 id="2-检查配置"><a href="#2-检查配置" class="headerlink" title="2. 检查配置"></a>2. 检查配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h3 id="3-设置用户名称与邮件地址"><a href="#3-设置用户名称与邮件地址" class="headerlink" title="3. 设置用户名称与邮件地址"></a>3. 设置用户名称与邮件地址</h3><p>每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><h3 id="4-配置默认文本编辑器"><a href="#4-配置默认文本编辑器" class="headerlink" title="4. 配置默认文本编辑器"></a>4. 配置默认文本编辑器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor vim</span><br></pre></td></tr></table></figure><h3 id="5-配置密钥"><a href="#5-配置密钥" class="headerlink" title="5. 配置密钥"></a>5. 配置密钥</h3><p>输入命令生成密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>进入文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br></pre></td></tr></table></figure><p>找到公钥匙、私匙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure><p><code>id_rsa</code>——私匙</p><p><code>id_rsa.pub</code>——公钥</p><p>复制公钥到git个人账号的ssh密钥中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> _posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> _posts </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
